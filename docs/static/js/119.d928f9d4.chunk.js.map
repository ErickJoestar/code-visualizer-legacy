{"version":3,"sources":["../node_modules/brace/mode/scad.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","scadHighlightRules","keywordMapper","createKeywordMapper","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"mappings":"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","file":"static/js/119.d928f9d4.chunk.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function DocCommentHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/scad_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var lang = acequire(\"../lib/lang\");\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var scadHighlightRules = function scadHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"this\",\n      \"keyword\": \"module|if|else|for\",\n      \"constant.language\": \"NULL\"\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: '[\"].*\\\\\\\\$',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: \"['].*\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: \"constant\",\n        // <CONSTANT>\n        regex: \"<[a-zA-Z0-9.]+>\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directivs\n        regex: \"(?:use|include)\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|new|delete|typeof|void)\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n  };\n\n  oop.inherits(scadHighlightRules, TextHighlightRules);\n  exports.scadHighlightRules = scadHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/scad\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/scad_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var scadHighlightRules = acequire(\"./scad_highlight_rules\").scadHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = scadHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/scad\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}