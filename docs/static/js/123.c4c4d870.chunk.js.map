{"version":3,"sources":["../node_modules/brace/mode/sh.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","reservedKeywords","languageConstructs","ShHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","push","include","next","defaultToken","stateName","onMatch","value","currentState","stack","tokens","split","splitRegex","type","rules","heredoc","shift","indentedHeredoc","start","end","integer","variables","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CStyleFoldMode","CstyleBehaviour","HighlightRules","foldingRules","$behaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","getTokenizer","getLineTokens","outdents","checkOutdent","input","trim","last","pop","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"static/js/123.c4c4d870.chunk.js","sourcesContent":["ace.define(\"ace/mode/sh_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var reservedKeywords = exports.reservedKeywords = '!|{|}|case|do|done|elif|else|' + 'esac|fi|for|if|in|then|until|while|' + '&|;|export|local|read|typeset|unset|' + 'elif|select|set|function|declare|readonly';\n  var languageConstructs = exports.languageConstructs = '[|]|alias|bg|bind|break|builtin|' + 'cd|command|compgen|complete|continue|' + 'dirs|disown|echo|enable|eval|exec|' + 'exit|fc|fg|getopts|hash|help|history|' + 'jobs|kill|let|logout|popd|printf|pushd|' + 'pwd|return|set|shift|shopt|source|' + 'suspend|test|times|trap|type|ulimit|' + 'umask|unalias|wait';\n\n  var ShHighlightRules = function ShHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": reservedKeywords,\n      \"support.function.builtin\": languageConstructs,\n      \"invalid.deprecated\": \"debugger\"\n    }, \"identifier\");\n    var integer = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var fileDescriptor = \"(?:&\" + intPart + \")\";\n    var variableName = \"[a-zA-Z_][a-zA-Z0-9_]*\";\n    var variable = \"(?:\" + variableName + \"(?==))\";\n    var builtinVariable = \"(?:\\\\$(?:SHLVL|\\\\$|\\\\!|\\\\?))\";\n    var func = \"(?:\" + variableName + \"\\\\s*\\\\(\\\\))\";\n    this.$rules = {\n      \"start\": [{\n        token: \"constant\",\n        regex: /\\\\./\n      }, {\n        token: [\"text\", \"comment\"],\n        regex: /(^|\\s)(#.*)$/\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        push: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(?:[$`\"\\\\]|$)/\n        }, {\n          include: \"variables\"\n        }, {\n          token: \"keyword.operator\",\n          regex: /`/ // TODO highlight `\n\n        }, {\n          token: \"string.end\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string\",\n        regex: \"\\\\$'\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(?:[abeEfnrtv\\\\'\"]|x[a-fA-F\\d]{1,2}|u[a-fA-F\\d]{4}([a-fA-F\\d]{4})?|c.|\\d{1,3})/\n        }, {\n          token: \"string\",\n          regex: \"'\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        regex: \"<<<\",\n        token: \"keyword.operator\"\n      }, {\n        stateName: \"heredoc\",\n        regex: \"(<<-?)(\\\\s*)(['\\\"`]?)([\\\\w\\\\-]+)(['\\\"`]?)\",\n        onMatch: function onMatch(value, currentState, stack) {\n          var next = value[2] == '-' ? \"indentedHeredoc\" : \"heredoc\";\n          var tokens = value.split(this.splitRegex);\n          stack.push(next, tokens[4]);\n          return [{\n            type: \"constant\",\n            value: tokens[1]\n          }, {\n            type: \"text\",\n            value: tokens[2]\n          }, {\n            type: \"string\",\n            value: tokens[3]\n          }, {\n            type: \"support.class\",\n            value: tokens[4]\n          }, {\n            type: \"string\",\n            value: tokens[5]\n          }];\n        },\n        rules: {\n          heredoc: [{\n            onMatch: function onMatch(value, currentState, stack) {\n              if (value === stack[1]) {\n                stack.shift();\n                stack.shift();\n                this.next = stack[0] || \"start\";\n                return \"support.class\";\n              }\n\n              this.next = \"\";\n              return \"string\";\n            },\n            regex: \".*$\",\n            next: \"start\"\n          }],\n          indentedHeredoc: [{\n            token: \"string\",\n            regex: \"^\\t+\"\n          }, {\n            onMatch: function onMatch(value, currentState, stack) {\n              if (value === stack[1]) {\n                stack.shift();\n                stack.shift();\n                this.next = stack[0] || \"start\";\n                return \"support.class\";\n              }\n\n              this.next = \"\";\n              return \"string\";\n            },\n            regex: \".*$\",\n            next: \"start\"\n          }]\n        }\n      }, {\n        regex: \"$\",\n        token: \"empty\",\n        next: function next(currentState, stack) {\n          if (stack[0] === \"heredoc\" || stack[0] === \"indentedHeredoc\") return stack[0];\n          return currentState;\n        }\n      }, {\n        token: [\"keyword\", \"text\", \"text\", \"text\", \"variable\"],\n        regex: /(declare|local|readonly)(\\s+)(?:(-[fixar]+)(\\s+))?([a-zA-Z_][a-zA-Z0-9_]*\\b)/\n      }, {\n        token: \"variable.language\",\n        regex: builtinVariable\n      }, {\n        token: \"variable\",\n        regex: variable\n      }, {\n        include: \"variables\"\n      }, {\n        token: \"support.function\",\n        regex: func\n      }, {\n        token: \"support.function\",\n        regex: fileDescriptor\n      }, {\n        token: \"string\",\n        // ' string\n        start: \"'\",\n        end: \"'\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|~|<|>|<=|=>|=|!=|[%&|`]\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \";\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\)\\\\}]\",\n        next: \"pop\"\n      }],\n      variables: [{\n        token: \"variable\",\n        regex: /(\\$)(\\w+)/\n      }, {\n        token: [\"variable\", \"paren.lparen\"],\n        regex: /(\\$)(\\()/,\n        push: \"start\"\n      }, {\n        token: [\"variable\", \"paren.lparen\", \"keyword.operator\", \"variable\", \"keyword.operator\"],\n        regex: /(\\$)(\\{)([#!]?)(\\w+|[*@#?\\-$!0_])(:[?+\\-=]?|##?|%%?|,,?\\/|\\^\\^?)?/,\n        push: \"start\"\n      }, {\n        token: \"variable\",\n        regex: /\\$[*@#?\\-$!0_]/\n      }, {\n        token: [\"variable\", \"paren.lparen\"],\n        regex: /(\\$)(\\{)/,\n        push: \"start\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(ShHighlightRules, TextHighlightRules);\n  exports.ShHighlightRules = ShHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/sh\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/sh_highlight_rules\", \"ace/range\", \"ace/mode/folding/cstyle\", \"ace/mode/behaviour/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var ShHighlightRules = acequire(\"./sh_highlight_rules\").ShHighlightRules;\n  var Range = acequire(\"../range\").Range;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ShHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"pass\": 1,\n      \"return\": 1,\n      \"raise\": 1,\n      \"break\": 1,\n      \"continue\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/sh\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}