{"version":3,"sources":["../node_modules/brace/mode/scheme.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","SchemeHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","inherits","Range","MatchingParensOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","minorIndentFunctions","$toIndent","str","split","map","ch","exec","join","$calculateIndent","tab","isParen","baseIndent","delta","i","substring","iBefore","fn","indexOf","undefined","getNextLineIndent","state","$id"],"mappings":"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","file":"static/js/121.efe214ee.chunk.js","sourcesContent":["ace.define(\"ace/mode/scheme_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var SchemeHighlightRules = function SchemeHighlightRules() {\n    var keywordControl = \"case|do|let|loop|if|else|when\";\n    var keywordOperator = \"eq?|eqv?|equal?|and|or|not|null?\";\n    var constantLanguage = \"#t|#f\";\n    var supportFunctions = \"cons|car|cdr|cond|lambda|lambda*|syntax-rules|format|set!|quote|eval|append|list|list?|member?|load\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control\": keywordControl,\n      \"keyword.operator\": keywordOperator,\n      \"constant.language\": constantLanguage,\n      \"support.function\": supportFunctions\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \";.*$\"\n      }, {\n        \"token\": [\"storage.type.function-type.scheme\", \"text\", \"entity.name.function.scheme\"],\n        \"regex\": \"(?:\\\\b(?:(define|define-syntax|define-macro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\n      }, {\n        \"token\": \"punctuation.definition.constant.character.scheme\",\n        \"regex\": \"#:\\\\S+\"\n      }, {\n        \"token\": [\"punctuation.definition.variable.scheme\", \"variable.other.global.scheme\", \"punctuation.definition.variable.scheme\"],\n        \"regex\": \"(\\\\*)(\\\\S*)(\\\\*)\"\n      }, {\n        \"token\": \"constant.numeric\",\n        // hex\n        \"regex\": \"#[xXoObB][0-9a-fA-F]+\"\n      }, {\n        \"token\": \"constant.numeric\",\n        // float\n        \"regex\": \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\"\n      }, {\n        \"token\": keywordMapper,\n        \"regex\": \"[a-zA-Z_#][a-zA-Z0-9_\\\\-\\\\?\\\\!\\\\*]*\"\n      }, {\n        \"token\": \"string\",\n        \"regex\": '\"(?=.)',\n        \"next\": \"qqstring\"\n      }],\n      \"qqstring\": [{\n        \"token\": \"constant.character.escape.scheme\",\n        \"regex\": \"\\\\\\\\.\"\n      }, {\n        \"token\": \"string\",\n        \"regex\": '[^\"\\\\\\\\]+',\n        \"merge\": true\n      }, {\n        \"token\": \"string\",\n        \"regex\": \"\\\\\\\\$\",\n        \"next\": \"qqstring\",\n        \"merge\": true\n      }, {\n        \"token\": \"string\",\n        \"regex\": '\"|$',\n        \"next\": \"start\",\n        \"merge\": true\n      }]\n    };\n  };\n\n  oop.inherits(SchemeHighlightRules, TextHighlightRules);\n  exports.SchemeHighlightRules = SchemeHighlightRules;\n});\nace.define(\"ace/mode/matching_parens_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingParensOutdent = function MatchingParensOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\)/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\))/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      var match = line.match(/^(\\s+)/);\n\n      if (match) {\n        return match[1];\n      }\n\n      return \"\";\n    };\n  }).call(MatchingParensOutdent.prototype);\n  exports.MatchingParensOutdent = MatchingParensOutdent;\n});\nace.define(\"ace/mode/scheme\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/scheme_highlight_rules\", \"ace/mode/matching_parens_outdent\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var SchemeHighlightRules = acequire(\"./scheme_highlight_rules\").SchemeHighlightRules;\n  var MatchingParensOutdent = acequire(\"./matching_parens_outdent\").MatchingParensOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = SchemeHighlightRules;\n    this.$outdent = new MatchingParensOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.minorIndentFunctions = [\"define\", \"lambda\", \"define-macro\", \"define-syntax\", \"syntax-rules\", \"define-record-type\", \"define-structure\"];\n\n    this.$toIndent = function (str) {\n      return str.split('').map(function (ch) {\n        if (/\\s/.exec(ch)) {\n          return ch;\n        } else {\n          return ' ';\n        }\n      }).join('');\n    };\n\n    this.$calculateIndent = function (line, tab) {\n      var baseIndent = this.$getIndent(line);\n      var delta = 0;\n      var isParen, ch;\n\n      for (var i = line.length - 1; i >= 0; i--) {\n        ch = line[i];\n\n        if (ch === '(') {\n          delta--;\n          isParen = true;\n        } else if (ch === '(' || ch === '[' || ch === '{') {\n          delta--;\n          isParen = false;\n        } else if (ch === ')' || ch === ']' || ch === '}') {\n          delta++;\n        }\n\n        if (delta < 0) {\n          break;\n        }\n      }\n\n      if (delta < 0 && isParen) {\n        i += 1;\n        var iBefore = i;\n        var fn = '';\n\n        while (true) {\n          ch = line[i];\n\n          if (ch === ' ' || ch === '\\t') {\n            if (this.minorIndentFunctions.indexOf(fn) !== -1) {\n              return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n            } else {\n              return this.$toIndent(line.substring(0, i + 1));\n            }\n          } else if (ch === undefined) {\n            return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n          }\n\n          fn += line[i];\n          i++;\n        }\n      } else if (delta < 0 && !isParen) {\n        return this.$toIndent(line.substring(0, i + 1));\n      } else if (delta > 0) {\n        baseIndent = baseIndent.substring(0, baseIndent.length - tab.length);\n        return baseIndent;\n      } else {\n        return baseIndent;\n      }\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      return this.$calculateIndent(line, tab);\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/scheme\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}