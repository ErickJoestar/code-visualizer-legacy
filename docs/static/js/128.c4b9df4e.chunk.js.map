{"version":3,"sources":["../node_modules/brace/mode/space.js"],"names":["ace","define","acequire","exports","module","oop","BaseFoldMode","FoldMode","Range","inherits","this","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextHighlightRules","SpaceHighlightRules","$rules","token","regex","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$id"],"mappings":"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","file":"static/js/128.c4b9df4e.chunk.js","sourcesContent":["ace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/space_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var SpaceHighlightRules = function SpaceHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"empty_line\",\n        regex: / */,\n        next: \"key\"\n      }, {\n        token: \"empty_line\",\n        regex: /$/,\n        next: \"key\"\n      }],\n      \"key\": [{\n        token: \"variable\",\n        regex: /\\S+/\n      }, {\n        token: \"empty_line\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        token: \"keyword.operator\",\n        regex: / /,\n        next: \"value\"\n      }],\n      \"value\": [{\n        token: \"keyword.operator\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: /[^$]/\n      }]\n    };\n  };\n\n  oop.inherits(SpaceHighlightRules, TextHighlightRules);\n  exports.SpaceHighlightRules = SpaceHighlightRules;\n});\nace.define(\"ace/mode/space\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/folding/coffee\", \"ace/mode/space_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var FoldMode = acequire(\"./folding/coffee\").FoldMode;\n  var SpaceHighlightRules = acequire(\"./space_highlight_rules\").SpaceHighlightRules;\n\n  var Mode = function Mode() {\n    this.HighlightRules = SpaceHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/space\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}