{"version":3,"sources":["../node_modules/brace/mode/abc.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","ABCHighlightRules","this","$rules","start","token","regex","comment","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$id"],"mappings":"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","file":"static/js/7.914c0b9f.chunk.js","sourcesContent":["ace.define(\"ace/mode/abc_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ABCHighlightRules = function ABCHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: ['zupfnoter.information.comment.line.percentage', 'information.keyword', 'in formation.keyword.embedded'],\n        regex: '(%%%%)(hn\\\\.[a-z]*)(.*)',\n        comment: 'Instruction Comment'\n      }, {\n        token: ['information.comment.line.percentage', 'information.keyword.embedded'],\n        regex: '(%%)(.*)',\n        comment: 'Instruction Comment'\n      }, {\n        token: 'comment.line.percentage',\n        regex: '%.*',\n        comment: 'Comments'\n      }, {\n        token: 'barline.keyword.operator',\n        regex: '[\\\\[:]*[|:][|\\\\]:]*(?:\\\\[?[0-9]+)?|\\\\[[0-9]+',\n        comment: 'Bar lines'\n      }, {\n        token: ['information.keyword.embedded', 'information.argument.string.unquoted'],\n        regex: '(\\\\[[A-Za-z]:)([^\\\\]]*\\\\])',\n        comment: 'embedded Header lines'\n      }, {\n        token: ['information.keyword', 'information.argument.string.unquoted'],\n        regex: '^([A-Za-z]:)([^%\\\\\\\\]*)',\n        comment: 'Header lines'\n      }, {\n        token: ['text', 'entity.name.function', 'string.unquoted', 'text'],\n        regex: '(\\\\[)([A-Z]:)(.*?)(\\\\])',\n        comment: 'Inline fields'\n      }, {\n        token: ['accent.constant.language', 'pitch.constant.numeric', 'duration.constant.numeric'],\n        regex: '([\\\\^=_]*)([A-Ga-gz][,\\']*)([0-9]*/*[><0-9]*)',\n        comment: 'Notes'\n      }, {\n        token: 'zupfnoter.jumptarget.string.quoted',\n        regex: '[\\\\\"!]\\\\^\\\\:.*?[\\\\\"!]',\n        comment: 'Zupfnoter jumptarget'\n      }, {\n        token: 'zupfnoter.goto.string.quoted',\n        regex: '[\\\\\"!]\\\\^\\\\@.*?[\\\\\"!]',\n        comment: 'Zupfnoter goto'\n      }, {\n        token: 'zupfnoter.annotation.string.quoted',\n        regex: '[\\\\\"!]\\\\^\\\\!.*?[\\\\\"!]',\n        comment: 'Zupfnoter annoation'\n      }, {\n        token: 'zupfnoter.annotationref.string.quoted',\n        regex: '[\\\\\"!]\\\\^\\\\#.*?[\\\\\"!]',\n        comment: 'Zupfnoter annotation reference'\n      }, {\n        token: 'chordname.string.quoted',\n        regex: '[\\\\\"!]\\\\^.*?[\\\\\"!]',\n        comment: 'abc chord'\n      }, {\n        token: 'string.quoted',\n        regex: '[\\\\\"!].*?[\\\\\"!]',\n        comment: 'abc annotation'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ABCHighlightRules.metaData = {\n    fileTypes: ['abc'],\n    name: 'ABC',\n    scopeName: 'text.abcnotation'\n  };\n  oop.inherits(ABCHighlightRules, TextHighlightRules);\n  exports.ABCHighlightRules = ABCHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/abc\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/abc_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var ABCHighlightRules = acequire(\"./abc_highlight_rules\").ABCHighlightRules;\n  var FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = ABCHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/abc\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}