{"version":3,"sources":["../node_modules/brace/mode/csharp.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","CSharpHighlightRules","keywordMapper","createKeywordMapper","end","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","CFoldMode","usingRe","getFoldWidgetRangeBase","getFoldWidgetBase","prev","getUsingStatementBlock","getRegionBlock","endColumn","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","createWorker","$id"],"mappings":"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","file":"static/js/22.316f85da.chunk.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function DocCommentHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/csharp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CSharpHighlightRules = function CSharpHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"this\",\n      \"keyword\": \"abstract|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|partial|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string|var|dynamic\",\n      \"constant.language\": \"null|true|false\"\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // character\n        regex: /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/\n      }, {\n        token: \"string\",\n        start: '\"',\n        end: '\"|$',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/\n        }, {\n          token: \"invalid\",\n          regex: /\\\\./\n        }]\n      }, {\n        token: \"string\",\n        start: '@\"',\n        end: '\"',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: '\"\"'\n        }]\n      }, {\n        token: \"string\",\n        start: /\\$\"/,\n        end: '\"|$',\n        next: [{\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?$)|{{/\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/\n        }, {\n          token: \"invalid\",\n          regex: /\\\\./\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n      }, {\n        token: \"keyword\",\n        regex: \"^\\\\s*#(if|else|elif|endif|define|undef|warning|error|line|region|endregion|pragma)\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(CSharpHighlightRules, TextHighlightRules);\n  exports.CSharpHighlightRules = CSharpHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/folding/csharp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var CFoldMode = acequire(\"./cstyle\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, CFoldMode);\n  (function () {\n    this.usingRe = /^\\s*using \\S/;\n    this.getFoldWidgetRangeBase = this.getFoldWidgetRange;\n    this.getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var fw = this.getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw) {\n        var line = session.getLine(row);\n        if (/^\\s*#region\\b/.test(line)) return \"start\";\n        var usingRe = this.usingRe;\n\n        if (usingRe.test(line)) {\n          var prev = session.getLine(row - 1);\n          var next = session.getLine(row + 1);\n          if (!usingRe.test(prev) && usingRe.test(next)) return \"start\";\n        }\n      }\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.getFoldWidgetRangeBase(session, foldStyle, row);\n      if (range) return range;\n      var line = session.getLine(row);\n      if (this.usingRe.test(line)) return this.getUsingStatementBlock(session, line, row);\n      if (/^\\s*#region\\b/.test(line)) return this.getRegionBlock(session, line, row);\n    };\n\n    this.getUsingStatementBlock = function (session, line, row) {\n      var startColumn = line.match(this.usingRe)[0].length - 1;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        if (/^\\s*$/.test(line)) continue;\n        if (!this.usingRe.test(line)) break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*#(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/csharp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/csharp_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/csharp\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var CSharpHighlightRules = acequire(\"./csharp_highlight_rules\").CSharpHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n  var CStyleFoldMode = acequire(\"./folding/csharp\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = CSharpHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.createWorker = function (session) {\n      return null;\n    };\n\n    this.$id = \"ace/mode/csharp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}