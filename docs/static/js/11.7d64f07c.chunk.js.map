{"version":3,"sources":["../node_modules/brace/mode/applescript.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","AppleScriptHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","next","defaultToken","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","file":"static/js/11.7d64f07c.chunk.js","sourcesContent":["ace.define(\"ace/mode/applescript_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var AppleScriptHighlightRules = function AppleScriptHighlightRules() {\n    var keywords = \"about|above|after|against|and|around|as|at|back|before|beginning|\" + \"behind|below|beneath|beside|between|but|by|considering|\" + \"contain|contains|continue|copy|div|does|eighth|else|end|equal|\" + \"equals|error|every|exit|fifth|first|for|fourth|from|front|\" + \"get|given|global|if|ignoring|in|into|is|it|its|last|local|me|\" + \"middle|mod|my|ninth|not|of|on|onto|or|over|prop|property|put|ref|\" + \"reference|repeat|returning|script|second|set|seventh|since|\" + \"sixth|some|tell|tenth|that|the|then|third|through|thru|\" + \"timeout|times|to|transaction|try|until|where|while|whose|with|without\";\n    var builtinConstants = \"AppleScript|false|linefeed|return|pi|quote|result|space|tab|true\";\n    var builtinFunctions = \"activate|beep|count|delay|launch|log|offset|read|round|run|say|\" + \"summarize|write\";\n    var builtinTypes = \"alias|application|boolean|class|constant|date|file|integer|list|\" + \"number|real|record|string|text|character|characters|contents|day|\" + \"frontmost|id|item|length|month|name|paragraph|paragraphs|rest|\" + \"reverse|running|time|version|weekday|word|words|year\";\n    var keywordMapper = this.createKeywordMapper({\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"support.type\": builtinTypes,\n      \"keyword\": keywords\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"--.*$\"\n      }, {\n        token: \"comment\",\n        // multi line comment\n        regex: \"\\\\(\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: '\".*?\"'\n      }, {\n        token: \"support.type\",\n        regex: '\\\\b(POSIX file|POSIX path|(date|time) string|quoted form)\\\\b'\n      }, {\n        token: \"support.function\",\n        regex: '\\\\b(clipboard info|the clipboard|info for|list (disks|folder)|' + 'mount volume|path to|(close|open for) access|(get|set) eof|' + 'current date|do shell script|get volume settings|random number|' + 'set volume|system attribute|system info|time to GMT|' + '(load|run|store) script|scripting components|' + 'ASCII (character|number)|localized string|' + 'choose (application|color|file|file name|' + 'folder|from list|remote application|URL)|' + 'display (alert|dialog))\\\\b|^\\\\s*return\\\\b'\n      }, {\n        token: \"constant.language\",\n        regex: '\\\\b(text item delimiters|current application|missing value)\\\\b'\n      }, {\n        token: \"keyword\",\n        regex: '\\\\b(apart from|aside from|instead of|out of|greater than|' + \"isn't|(doesn't|does not) (equal|come before|come after|contain)|\" + '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' + 'contained by|comes (before|after)|a (ref|reference))\\\\b'\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z][a-zA-Z0-9_]*\\\\b\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\)\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(AppleScriptHighlightRules, TextHighlightRules);\n  exports.AppleScriptHighlightRules = AppleScriptHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/applescript\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/applescript_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var AppleScriptHighlightRules = acequire(\"./applescript_highlight_rules\").AppleScriptHighlightRules;\n  var FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = AppleScriptHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {\n      start: \"(*\",\n      end: \"*)\"\n    };\n    this.$id = \"ace/mode/applescript\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}