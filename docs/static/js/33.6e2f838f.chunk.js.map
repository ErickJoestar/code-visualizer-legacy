{"version":3,"sources":["../node_modules/brace/mode/dot.js"],"names":["ace","define","acequire","exports","module","Range","MatchingBraceOutdent","this","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","lang","DotHighlightRules","keywords","arrayToMap","split","attributes","merge","value","hasOwnProperty","toLowerCase","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","DotFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","$id"],"mappings":"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","file":"static/js/33.6e2f838f.chunk.js","sourcesContent":["ace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function DocCommentHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/dot_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\", \"ace/mode/doc_comment_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var lang = acequire(\"../lib/lang\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var DotHighlightRules = function DotHighlightRules() {\n    var keywords = lang.arrayToMap(\"strict|node|edge|graph|digraph|subgraph\".split(\"|\"));\n    var attributes = lang.arrayToMap(\"damping|k|url|area|arrowhead|arrowsize|arrowtail|aspect|bb|bgcolor|center|charset|clusterrank|color|colorscheme|comment|compound|concentrate|constraint|decorate|defaultdist|dim|dimen|dir|diredgeconstraints|distortion|dpi|edgeurl|edgehref|edgetarget|edgetooltip|epsilon|esep|fillcolor|fixedsize|fontcolor|fontname|fontnames|fontpath|fontsize|forcelabels|gradientangle|group|headurl|head_lp|headclip|headhref|headlabel|headport|headtarget|headtooltip|height|href|id|image|imagepath|imagescale|label|labelurl|label_scheme|labelangle|labeldistance|labelfloat|labelfontcolor|labelfontname|labelfontsize|labelhref|labeljust|labelloc|labeltarget|labeltooltip|landscape|layer|layerlistsep|layers|layerselect|layersep|layout|len|levels|levelsgap|lhead|lheight|lp|ltail|lwidth|margin|maxiter|mclimit|mindist|minlen|mode|model|mosek|nodesep|nojustify|normalize|nslimit|nslimit1|ordering|orientation|outputorder|overlap|overlap_scaling|pack|packmode|pad|page|pagedir|pencolor|penwidth|peripheries|pin|pos|quadtree|quantum|rank|rankdir|ranksep|ratio|rects|regular|remincross|repulsiveforce|resolution|root|rotate|rotation|samehead|sametail|samplepoints|scale|searchsize|sep|shape|shapefile|showboxes|sides|size|skew|smoothing|sortv|splines|start|style|stylesheet|tailurl|tail_lp|tailclip|tailhref|taillabel|tailport|tailtarget|tailtooltip|target|tooltip|truecolor|vertices|viewport|voro_margin|weight|width|xlabel|xlp|z\".split(\"|\"));\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: /\\/\\/.*$/\n      }, {\n        token: \"comment\",\n        regex: /#.*$/\n      }, {\n        token: \"comment\",\n        // multi line comment\n        merge: true,\n        regex: /\\/\\*/,\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        regex: \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"constant.numeric\",\n        regex: /[+\\-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?\\b/\n      }, {\n        token: \"keyword.operator\",\n        regex: /\\+|=|\\->/\n      }, {\n        token: \"punctuation.operator\",\n        regex: /,|;/\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[{]/\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\]}]/\n      }, {\n        token: \"comment\",\n        regex: /^#!.*$/\n      }, {\n        token: function token(value) {\n          if (keywords.hasOwnProperty(value.toLowerCase())) {\n            return \"keyword\";\n          } else if (attributes.hasOwnProperty(value.toLowerCase())) {\n            return \"variable\";\n          } else {\n            return \"text\";\n          }\n        },\n        regex: \"\\\\-?[a-zA-Z_][a-zA-Z0-9_\\\\-]*\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+',\n        merge: true\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\",\n        merge: true\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\",\n        merge: true\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"[^'\\\\\\\\]+\",\n        merge: true\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\",\n        merge: true\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\",\n        merge: true\n      }]\n    };\n  };\n\n  oop.inherits(DotHighlightRules, TextHighlightRules);\n  exports.DotHighlightRules = DotHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/dot\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/matching_brace_outdent\", \"ace/mode/dot_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var DotHighlightRules = acequire(\"./dot_highlight_rules\").DotHighlightRules;\n  var DotFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = DotHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new DotFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"//\", \"#\"];\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/dot\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}