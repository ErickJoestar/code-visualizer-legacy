{"version":3,"sources":["../node_modules/brace/mode/asciidoc.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","AsciidocHighlightRules","quoteRule","ch","test","this","$rules","token","regex","next","include","identifierRe","noEscape","tokenMap","macro","tableBlock","titleUnderline","singleLineTitle","pageBreak","option","otherBlock","literal","optionalTitle","escape","link","state","stateRules","i","length","rule","args","concat","filter","x","splice","apply","inherits","BaseFoldMode","FoldMode","Range","foldingStartMarker","singleLineHeadingRe","getFoldWidget","session","foldStyle","row","line","getLine","bgTokenizer","getState","getFoldWidgetRange","startColumn","maxRow","getLength","startRow","endRow","match","levels","getTokenType","startHeadingLevel","getLevel","value","endColumn","lastIndexOf","getTokens","type","level","indexOf","Infinity","call","prototype","TextMode","Mode","AsciidocFoldMode","HighlightRules","foldingRules","getNextLineIndent","tab","exec","Array","join","$getIndent","$id"],"mappings":"6HAAAA,IAAIC,OAAO,oCAAqC,CAAC,UAAW,UAAW,SAAU,cAAe,kCAAkC,SAAUC,EAAUC,EAASC,GAC7J,aAEA,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBAExDC,EAAyB,WA+T3B,SAASC,EAAUC,GAEjB,OADa,KAAKC,KAAKD,GAAM,MAAQ,aACrBA,EAAK,KAAOA,EAAK,OAASA,EAAK,aA/TjDE,KAAKC,OAAS,CACZ,MAAS,CAAC,CACRC,MAAO,QACPC,MAAO,KACN,CACDD,MAAO,UACPC,MAAO,cACPC,KAAM,gBACL,CACDF,MAAO,UACPC,MAAO,aACPC,KAAM,gBACL,CACDF,MAAO,SACPC,MAAO,cACPC,KAAM,oBACL,CACDF,MAAO,UACPC,MAAO,cACN,CACDD,MAAO,OACPC,MAAO,SACN,CACDD,MAAO,QACPC,MAAO,GACPC,KAAM,4BAER,wBAA2B,CAAC,CAC1BC,QAAS,gBACR,CACDH,MAAO,UACPC,MAAO,UACN,CACDD,MAAO,UACPC,MAAO,4CACN,CACDE,QAAS,aACR,CACDH,MAAO,UACPC,MAAO,UACPC,KAAM,iBACL,CACDF,MAAO,QACPC,MAAO,GACPC,KAAM,SAER,aAAgB,CAAC,CACfF,MAAO,cACPC,MAAO,cACPC,KAAM,gBACL,CACDF,MAAO,aACPC,MAAO,iBACPC,KAAM,cACL,CACDF,MAAO,UACPC,MAAO,kBACPC,KAAM,SACL,CACDF,MAAO,SACPC,MAAO,cACPC,KAAM,SACL,CACDF,MAAO,YACPC,MAAO,UACPC,KAAM,SACL,CACDF,MAAO,UACPC,MAAO,cACPC,KAAM,gBACL,CACDF,MAAO,iBACPC,MAAO,2CACPC,KAAM,SACL,CACDF,MAAO,kBACPC,MAAO,kBACPC,KAAM,SACL,CACDF,MAAO,aACPC,MAAO,wBACPC,KAAM,SACL,CACDF,MAAO,gBACPC,MAAO,eACPC,KAAM,UAER,UAAa,CAAC,CACZF,MAAO,UACPC,MAAO,6DACPC,KAAM,YACL,CACDF,MAAO,WACPC,MAAO,0BACPC,KAAM,YACL,CACDF,MAAO,gCACPC,MAAO,qBACPC,KAAM,QACL,CACDF,MAAO,UACPC,MAAO,UACPC,KAAM,UAER,KAAQ,CAAC,CACPF,MAAO,CAAC,OAAQ,qBAChBC,MAAO,yEACN,CACDD,MAAO,OACPC,MAAO,8DACN,CACDD,MAAO,OACPC,MAAO,+BACN,CACDE,QAAS,UACR,CACDA,QAAS,gBACR,CACDH,MAAO,UACPC,MAAO,SACPC,KAAM,oBACL,CACDF,MAAO,SACPC,MAAO,+EACN,CACDD,MAAO,SACPC,MAAO,+BACN,CACDD,MAAO,UACPC,MAAO,SACN,CACDD,MAAO,OACPC,MArIe,2BAsId,CACDD,MAAO,CAAC,UAAW,SAAU,WAC7BC,MAAO,8BACN,CACDD,MAAO,UACPC,MAAO,qBACN,CACDD,MAAO,qBACPC,MAAO,qBACN,CACDD,MAAO,UACPC,MAAO,eACN,CACDD,MAAO,UACPC,MAAO,0BACN,CACDE,QAAS,UACR,CACDH,MAAO,QACPC,MAAO,QACPC,KAAM,UAER,SAAY,CAAC,CACXC,QAAS,aACR,CACDA,QAAS,SAEX,cAAiB,CAAC,CAChBH,MAAO,UACPC,MAAO,aACPC,KAAM,iBACL,CACDF,MAAO,UACPC,MAAO,GACPC,KAAM,UAER,aAAgB,CAAC,CACfF,MAAO,UACPC,MAAO,cACPC,KAAM,2BACL,CACDF,MAAO,mBACPC,MAAO,UACN,CACDD,MAAO,UACPC,MAAO,SACN,CACDD,MAAO,UACPC,MAAO,MAET,aAAgB,CAAC,CACfD,MAAO,UACPC,MAAO,aACPC,KAAM,2BACL,CACDF,MAAO,mBACPC,MAAO,UACN,CACDD,MAAO,UACPC,MAAO,SACN,CACDD,MAAO,UACPC,MAAO,MAET,iBAAoB,CAAC,CACnBD,MAAO,UACPC,MAAO,cACPC,KAAM,2BACL,CACDF,MAAO,UACPC,MAAOG,gCACN,CACDD,QAAS,UACR,CACDH,MAAO,UACPC,MAAO,MAET,iBAAoB,CAAC,CACnBD,MAAO,UACPC,MAAO,UACPC,KAAM,2BACL,CACDF,MAAO,UACPC,MAAO,QACPC,KAAM,2BACL,CACDF,MAAO,UACPC,MAAOG,gCACN,CACDD,QAAS,WAEX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","file":"static/js/12.7757f76e.chunk.js","sourcesContent":["ace.define(\"ace/mode/asciidoc_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var AsciidocHighlightRules = function AsciidocHighlightRules() {\n    var identifierRe = \"[a-zA-Z\\xA1-\\uFFFF]+\\\\b\";\n    this.$rules = {\n      \"start\": [{\n        token: \"empty\",\n        regex: /$/\n      }, {\n        token: \"literal\",\n        regex: /^\\.{4,}\\s*$/,\n        next: \"listingBlock\"\n      }, {\n        token: \"literal\",\n        regex: /^-{4,}\\s*$/,\n        next: \"literalBlock\"\n      }, {\n        token: \"string\",\n        regex: /^\\+{4,}\\s*$/,\n        next: \"passthroughBlock\"\n      }, {\n        token: \"keyword\",\n        regex: /^={4,}\\s*$/\n      }, {\n        token: \"text\",\n        regex: /^\\s*$/\n      }, {\n        token: \"empty\",\n        regex: \"\",\n        next: \"dissallowDelimitedBlock\"\n      }],\n      \"dissallowDelimitedBlock\": [{\n        include: \"paragraphEnd\"\n      }, {\n        token: \"comment\",\n        regex: '^//.+$'\n      }, {\n        token: \"keyword\",\n        regex: \"^(?:NOTE|TIP|IMPORTANT|WARNING|CAUTION):\"\n      }, {\n        include: \"listStart\"\n      }, {\n        token: \"literal\",\n        regex: /^\\s+.+$/,\n        next: \"indentedBlock\"\n      }, {\n        token: \"empty\",\n        regex: \"\",\n        next: \"text\"\n      }],\n      \"paragraphEnd\": [{\n        token: \"doc.comment\",\n        regex: /^\\/{4,}\\s*$/,\n        next: \"commentBlock\"\n      }, {\n        token: \"tableBlock\",\n        regex: /^\\s*[|!]=+\\s*$/,\n        next: \"tableBlock\"\n      }, {\n        token: \"keyword\",\n        regex: /^(?:--|''')\\s*$/,\n        next: \"start\"\n      }, {\n        token: \"option\",\n        regex: /^\\[.*\\]\\s*$/,\n        next: \"start\"\n      }, {\n        token: \"pageBreak\",\n        regex: /^>{3,}$/,\n        next: \"start\"\n      }, {\n        token: \"literal\",\n        regex: /^\\.{4,}\\s*$/,\n        next: \"listingBlock\"\n      }, {\n        token: \"titleUnderline\",\n        regex: /^(?:={2,}|-{2,}|~{2,}|\\^{2,}|\\+{2,})\\s*$/,\n        next: \"start\"\n      }, {\n        token: \"singleLineTitle\",\n        regex: /^={1,5}\\s+\\S.*$/,\n        next: \"start\"\n      }, {\n        token: \"otherBlock\",\n        regex: /^(?:\\*{2,}|_{2,})\\s*$/,\n        next: \"start\"\n      }, {\n        token: \"optionalTitle\",\n        regex: /^\\.[^.\\s].+$/,\n        next: \"start\"\n      }],\n      \"listStart\": [{\n        token: \"keyword\",\n        regex: /^\\s*(?:\\d+\\.|[a-zA-Z]\\.|[ixvmIXVM]+\\)|\\*{1,5}|-|\\.{1,5})\\s/,\n        next: \"listText\"\n      }, {\n        token: \"meta.tag\",\n        regex: /^.+(?::{2,4}|;;)(?: |$)/,\n        next: \"listText\"\n      }, {\n        token: \"support.function.list.callout\",\n        regex: /^(?:<\\d+>|\\d+>|>) /,\n        next: \"text\"\n      }, {\n        token: \"keyword\",\n        regex: /^\\+\\s*$/,\n        next: \"start\"\n      }],\n      \"text\": [{\n        token: [\"link\", \"variable.language\"],\n        regex: /((?:https?:\\/\\/|ftp:\\/\\/|file:\\/\\/|mailto:|callto:)[^\\s\\[]+)(\\[.*?\\])/\n      }, {\n        token: \"link\",\n        regex: /(?:https?:\\/\\/|ftp:\\/\\/|file:\\/\\/|mailto:|callto:)[^\\s\\[]+/\n      }, {\n        token: \"link\",\n        regex: /\\b[\\w\\.\\/\\-]+@[\\w\\.\\/\\-]+\\b/\n      }, {\n        include: \"macros\"\n      }, {\n        include: \"paragraphEnd\"\n      }, {\n        token: \"literal\",\n        regex: /\\+{3,}/,\n        next: \"smallPassthrough\"\n      }, {\n        token: \"escape\",\n        regex: /\\((?:C|TM|R)\\)|\\.{3}|->|<-|=>|<=|&#(?:\\d+|x[a-fA-F\\d]+);|(?: |^)--(?=\\s+\\S)/\n      }, {\n        token: \"escape\",\n        regex: /\\\\[_*'`+#]|\\\\{2}[_*'`+#]{2}/\n      }, {\n        token: \"keyword\",\n        regex: /\\s\\+$/\n      }, {\n        token: \"text\",\n        regex: identifierRe\n      }, {\n        token: [\"keyword\", \"string\", \"keyword\"],\n        regex: /(<<[\\w\\d\\-$]+,)(.*?)(>>|$)/\n      }, {\n        token: \"keyword\",\n        regex: /<<[\\w\\d\\-$]+,?|>>/\n      }, {\n        token: \"constant.character\",\n        regex: /\\({2,3}.*?\\){2,3}/\n      }, {\n        token: \"keyword\",\n        regex: /\\[\\[.+?\\]\\]/\n      }, {\n        token: \"support\",\n        regex: /^\\[{3}[\\w\\d =\\-]+\\]{3}/\n      }, {\n        include: \"quotes\"\n      }, {\n        token: \"empty\",\n        regex: /^\\s*$/,\n        next: \"start\"\n      }],\n      \"listText\": [{\n        include: \"listStart\"\n      }, {\n        include: \"text\"\n      }],\n      \"indentedBlock\": [{\n        token: \"literal\",\n        regex: /^[\\s\\w].+$/,\n        next: \"indentedBlock\"\n      }, {\n        token: \"literal\",\n        regex: \"\",\n        next: \"start\"\n      }],\n      \"listingBlock\": [{\n        token: \"literal\",\n        regex: /^\\.{4,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"constant.numeric\",\n        regex: '<\\\\d+>'\n      }, {\n        token: \"literal\",\n        regex: '[^<]+'\n      }, {\n        token: \"literal\",\n        regex: '<'\n      }],\n      \"literalBlock\": [{\n        token: \"literal\",\n        regex: /^-{4,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"constant.numeric\",\n        regex: '<\\\\d+>'\n      }, {\n        token: \"literal\",\n        regex: '[^<]+'\n      }, {\n        token: \"literal\",\n        regex: '<'\n      }],\n      \"passthroughBlock\": [{\n        token: \"literal\",\n        regex: /^\\+{4,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"literal\",\n        regex: identifierRe + \"|\\\\d+\"\n      }, {\n        include: \"macros\"\n      }, {\n        token: \"literal\",\n        regex: \".\"\n      }],\n      \"smallPassthrough\": [{\n        token: \"literal\",\n        regex: /[+]{3,}/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"literal\",\n        regex: /^\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"literal\",\n        regex: identifierRe + \"|\\\\d+\"\n      }, {\n        include: \"macros\"\n      }],\n      \"commentBlock\": [{\n        token: \"doc.comment\",\n        regex: /^\\/{4,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"doc.comment\",\n        regex: '^.*$'\n      }],\n      \"tableBlock\": [{\n        token: \"tableBlock\",\n        regex: /^\\s*\\|={3,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"tableBlock\",\n        regex: /^\\s*!={3,}\\s*$/,\n        next: \"innerTableBlock\"\n      }, {\n        token: \"tableBlock\",\n        regex: /\\|/\n      }, {\n        include: \"text\",\n        noEscape: true\n      }],\n      \"innerTableBlock\": [{\n        token: \"tableBlock\",\n        regex: /^\\s*!={3,}\\s*$/,\n        next: \"tableBlock\"\n      }, {\n        token: \"tableBlock\",\n        regex: /^\\s*|={3,}\\s*$/,\n        next: \"dissallowDelimitedBlock\"\n      }, {\n        token: \"tableBlock\",\n        regex: /!/\n      }],\n      \"macros\": [{\n        token: \"macro\",\n        regex: /{[\\w\\-$]+}/\n      }, {\n        token: [\"text\", \"string\", \"text\", \"constant.character\", \"text\"],\n        regex: /({)([\\w\\-$]+)(:)?(.+)?(})/\n      }, {\n        token: [\"text\", \"markup.list.macro\", \"keyword\", \"string\"],\n        regex: /(\\w+)(footnote(?:ref)?::?)([^\\s\\[]+)?(\\[.*?\\])?/\n      }, {\n        token: [\"markup.list.macro\", \"keyword\", \"string\"],\n        regex: /([a-zA-Z\\-][\\w\\.\\/\\-]*::?)([^\\s\\[]+)(\\[.*?\\])?/\n      }, {\n        token: [\"markup.list.macro\", \"keyword\"],\n        regex: /([a-zA-Z\\-][\\w\\.\\/\\-]+::?)(\\[.*?\\])/\n      }, {\n        token: \"keyword\",\n        regex: /^:.+?:(?= |$)/\n      }],\n      \"quotes\": [{\n        token: \"string.italic\",\n        regex: /__[^_\\s].*?__/\n      }, {\n        token: \"string.italic\",\n        regex: quoteRule(\"_\")\n      }, {\n        token: \"keyword.bold\",\n        regex: /\\*\\*[^*\\s].*?\\*\\*/\n      }, {\n        token: \"keyword.bold\",\n        regex: quoteRule(\"\\\\*\")\n      }, {\n        token: \"literal\",\n        regex: quoteRule(\"\\\\+\")\n      }, {\n        token: \"literal\",\n        regex: /\\+\\+[^+\\s].*?\\+\\+/\n      }, {\n        token: \"literal\",\n        regex: /\\$\\$.+?\\$\\$/\n      }, {\n        token: \"literal\",\n        regex: quoteRule(\"`\")\n      }, {\n        token: \"keyword\",\n        regex: quoteRule(\"^\")\n      }, {\n        token: \"keyword\",\n        regex: quoteRule(\"~\")\n      }, {\n        token: \"keyword\",\n        regex: /##?/\n      }, {\n        token: \"keyword\",\n        regex: /(?:\\B|^)``|\\b''/\n      }]\n    };\n\n    function quoteRule(ch) {\n      var prefix = /\\w/.test(ch) ? \"\\\\b\" : \"(?:\\\\B|^)\";\n      return prefix + ch + \"[^\" + ch + \"].*?\" + ch + \"(?![\\\\w*])\";\n    }\n\n    var tokenMap = {\n      macro: \"constant.character\",\n      tableBlock: \"doc.comment\",\n      titleUnderline: \"markup.heading\",\n      singleLineTitle: \"markup.heading\",\n      pageBreak: \"string\",\n      option: \"string.regexp\",\n      otherBlock: \"markup.list\",\n      literal: \"support.function\",\n      optionalTitle: \"constant.numeric\",\n      escape: \"constant.language.escape\",\n      link: \"markup.underline.list\"\n    };\n\n    for (var state in this.$rules) {\n      var stateRules = this.$rules[state];\n\n      for (var i = stateRules.length; i--;) {\n        var rule = stateRules[i];\n\n        if (rule.include || typeof rule == \"string\") {\n          var args = [i, 1].concat(this.$rules[rule.include || rule]);\n\n          if (rule.noEscape) {\n            args = args.filter(function (x) {\n              return !x.next;\n            });\n          }\n\n          stateRules.splice.apply(stateRules, args);\n        } else if (rule.token in tokenMap) {\n          rule.token = tokenMap[rule.token];\n        }\n      }\n    }\n  };\n\n  oop.inherits(AsciidocHighlightRules, TextHighlightRules);\n  exports.AsciidocHighlightRules = AsciidocHighlightRules;\n});\nace.define(\"ace/mode/folding/asciidoc\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /^(?:\\|={10,}|[\\.\\/=\\-~^+]{4,}\\s*$|={1,5} )/;\n    this.singleLineHeadingRe = /^={1,5}(?=\\s+\\S)/;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      if (!this.foldingStartMarker.test(line)) return \"\";\n\n      if (line[0] == \"=\") {\n        if (this.singleLineHeadingRe.test(line)) return \"start\";\n        if (session.getLine(row - 1).length != session.getLine(row).length) return \"\";\n        return \"start\";\n      }\n\n      if (session.bgTokenizer.getState(row) == \"dissallowDelimitedBlock\") return \"end\";\n      return \"start\";\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      if (!line.match(this.foldingStartMarker)) return;\n      var token;\n\n      function getTokenType(row) {\n        token = session.getTokens(row)[0];\n        return token && token.type;\n      }\n\n      var levels = [\"=\", \"-\", \"~\", \"^\", \"+\"];\n      var heading = \"markup.heading\";\n      var singleLineHeadingRe = this.singleLineHeadingRe;\n\n      function getLevel() {\n        var match = token.value.match(singleLineHeadingRe);\n        if (match) return match[0].length;\n        var level = levels.indexOf(token.value[0]) + 1;\n\n        if (level == 1) {\n          if (session.getLine(row - 1).length != session.getLine(row).length) return Infinity;\n        }\n\n        return level;\n      }\n\n      if (getTokenType(row) == heading) {\n        var startHeadingLevel = getLevel();\n\n        while (++row < maxRow) {\n          if (getTokenType(row) != heading) continue;\n          var level = getLevel();\n          if (level <= startHeadingLevel) break;\n        }\n\n        var isSingleLineHeading = token && token.value.match(this.singleLineHeadingRe);\n        endRow = isSingleLineHeading ? row - 1 : row - 2;\n\n        if (endRow > startRow) {\n          while (endRow > startRow && (!getTokenType(endRow) || token.value[0] == \"[\")) {\n            endRow--;\n          }\n        }\n\n        if (endRow > startRow) {\n          var endColumn = session.getLine(endRow).length;\n          return new Range(startRow, startColumn, endRow, endColumn);\n        }\n      } else {\n        var state = session.bgTokenizer.getState(row);\n\n        if (state == \"dissallowDelimitedBlock\") {\n          while (row-- > 0) {\n            if (session.bgTokenizer.getState(row).lastIndexOf(\"Block\") == -1) break;\n          }\n\n          endRow = row + 1;\n\n          if (endRow < startRow) {\n            var endColumn = session.getLine(row).length;\n            return new Range(endRow, 5, startRow, startColumn - 5);\n          }\n        } else {\n          while (++row < maxRow) {\n            if (session.bgTokenizer.getState(row) == \"dissallowDelimitedBlock\") break;\n          }\n\n          endRow = row;\n\n          if (endRow > startRow) {\n            var endColumn = session.getLine(row).length;\n            return new Range(startRow, 5, endRow, endColumn - 5);\n          }\n        }\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/asciidoc\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/asciidoc_highlight_rules\", \"ace/mode/folding/asciidoc\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var AsciidocHighlightRules = acequire(\"./asciidoc_highlight_rules\").AsciidocHighlightRules;\n  var AsciidocFoldMode = acequire(\"./folding/asciidoc\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = AsciidocHighlightRules;\n    this.foldingRules = new AsciidocFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.type = \"text\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      if (state == \"listblock\") {\n        var match = /^((?:.+)?)([-+*][ ]+)/.exec(line);\n\n        if (match) {\n          return new Array(match[1].length + 1).join(\" \") + match[2];\n        } else {\n          return \"\";\n        }\n      } else {\n        return this.$getIndent(line);\n      }\n    };\n\n    this.$id = \"ace/mode/asciidoc\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}