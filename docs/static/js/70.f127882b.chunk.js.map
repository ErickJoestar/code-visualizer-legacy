{"version":3,"sources":["../node_modules/brace/mode/kotlin.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","KotlinHighlightRules","this","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"mappings":"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","file":"static/js/70.f127882b.chunk.js","sourcesContent":["ace.define(\"ace/mode/kotlin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var KotlinHighlightRules = function KotlinHighlightRules() {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"entity.name.package.kotlin\", \"text\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n      }, {\n        include: \"#imports\"\n      }, {\n        include: \"#statements\"\n      }],\n      \"#classes\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:companion|class|object|interface))/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: [\"keyword.other.kotlin\", \"text\"],\n          regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=<|{|\\(|:)/,\n            next: \"pop\"\n          }, {\n            token: \"keyword.other.kotlin\",\n            regex: /\\bobject\\b/\n          }, {\n            token: \"entity.name.type.class.kotlin\",\n            regex: /\\w+/\n          }]\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|$)/,\n            next: \"pop\"\n          }, {\n            token: \"entity.other.inherited-class.kotlin\",\n            regex: /\\w+/\n          }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n              token: \"text\",\n              regex: /\\)/,\n              next: \"pop\"\n            }, {\n              include: \"#expressions\"\n            }]\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }]\n      }],\n      \"#comments\": [{\n        token: \"punctuation.definition.comment.kotlin\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"punctuation.definition.comment.kotlin\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.kotlin\"\n        }]\n      }, {\n        token: [\"text\", \"punctuation.definition.comment.kotlin\", \"comment.line.double-slash.kotlin\"],\n        regex: /(\\s*)(\\/\\/)(.*$)/\n      }],\n      \"#constants\": [{\n        token: \"constant.language.kotlin\",\n        regex: /\\b(?:true|false|null|this|super)\\b/\n      }, {\n        token: \"constant.numeric.kotlin\",\n        regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n      }, {\n        token: \"constant.other.kotlin\",\n        regex: /\\b[A-Z][A-Z0-9_]+\\b/\n      }],\n      \"#expressions\": [{\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#types\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#keywords\"\n      }],\n      \"#functions\": [{\n        token: \"text\",\n        regex: /(?=\\s*fun)/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\bfun\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\()/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.function.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|=|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\})/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#generics\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|>)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"storage.type.generic.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#getters-and-setters\": [{\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bset\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }, {\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(set)\\b(\\s*)(?=\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bget\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#imports\": [{\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"keyword.other.kotlin\"],\n        regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n      }],\n      \"#keywords\": [{\n        token: \"storage.modifier.kotlin\",\n        regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n      }, {\n        token: \"keyword.control.catch-exception.kotlin\",\n        regex: /\\b(?:try|catch|finally|throw)\\b/\n      }, {\n        token: \"keyword.control.kotlin\",\n        regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n      }, {\n        token: \"keyword.operator.kotlin\",\n        regex: /\\b(?:in|is|as|assert)\\b/\n      }, {\n        token: \"keyword.operator.comparison.kotlin\",\n        regex: /==|!=|===|!==|<=|>=|<|>/\n      }, {\n        token: \"keyword.operator.assignment.kotlin\",\n        regex: /=/\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/\n      }, {\n        token: \"keyword.operator.dot.kotlin\",\n        regex: /\\./\n      }, {\n        token: \"keyword.operator.increment-decrement.kotlin\",\n        regex: /\\-\\-|\\+\\+/\n      }, {\n        token: \"keyword.operator.arithmetic.kotlin\",\n        regex: /\\-|\\+|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator.arithmetic.assign.kotlin\",\n        regex: /\\+=|\\-=|\\*=|\\/=/\n      }, {\n        token: \"keyword.operator.logical.kotlin\",\n        regex: /!|&&|\\|\\|/\n      }, {\n        token: \"keyword.operator.range.kotlin\",\n        regex: /\\.\\./\n      }, {\n        token: \"punctuation.terminator.kotlin\",\n        regex: /;/\n      }],\n      \"#namespaces\": [{\n        token: \"keyword.other.kotlin\",\n        regex: /\\bnamespace\\b/\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }],\n      \"#parameters\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\)|=)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /=/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\))/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"variable.parameter.function.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#statements\": [{\n        include: \"#namespaces\"\n      }, {\n        include: \"#typedefs\"\n      }, {\n        include: \"#classes\"\n      }, {\n        include: \"#functions\"\n      }, {\n        include: \"#variables\"\n      }, {\n        include: \"#getters-and-setters\"\n      }, {\n        include: \"#expressions\"\n      }],\n      \"#strings\": [{\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.third.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /`/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }],\n      \"#typedefs\": [{\n        token: \"text\",\n        regex: /(?=\\s*type)/,\n        push: [{\n          token: \"text\",\n          regex: /(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\btype\\b/\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          include: \"#expressions\"\n        }]\n      }],\n      \"#types\": [{\n        token: \"storage.type.buildin.kotlin\",\n        regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n      }, {\n        token: \"storage.type.buildin.array.kotlin\",\n        regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n      }, {\n        token: [\"storage.type.buildin.collection.kotlin\", \"text\"],\n        regex: /\\b(Array|List|Map)(<\\b)/,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\w+</,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n        regex: /(#)(\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /->/\n      }],\n      \"#variables\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:var|val))/,\n        push: [{\n          token: \"text\",\n          regex: /(?=:|=|$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\b(?:var|val)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=:|=|$)/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.variable.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?==|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  KotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n  };\n  oop.inherits(KotlinHighlightRules, TextHighlightRules);\n  exports.KotlinHighlightRules = KotlinHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/kotlin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/kotlin_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var KotlinHighlightRules = acequire(\"./kotlin_highlight_rules\").KotlinHighlightRules;\n  var FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/kotlin\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}