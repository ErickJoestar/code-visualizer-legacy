{"version":3,"sources":["../node_modules/brace/mode/red.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","RedHighlightRules","this","$rules","token","regex","next","caseInsensitive","defaultToken","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","RedFoldMode","HighlightRules","foldingRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","blockCommentStart","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"mappings":"+HAAAA,IAAIC,OAAO,+BAAgC,CAAC,UAAW,UAAW,SAAU,cAAe,kCAAkC,SAAUC,EAAUC,EAASC,GACxJ,aAEA,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBAExDC,EAAoB,WAEtBC,KAAKC,OAAS,CACZ,MAAS,CAAC,CACRC,MAAO,mBACPC,MAAO,qEACN,CACDD,MAAO,eACPC,MAAO,0BACN,CACDD,MAAO,aACPC,MAAO,oBACN,CACDD,MAAO,aACPC,MAAO,uCACN,CACDD,MAAO,aACPC,MAAO,yEACN,CACDD,MAAO,cACPC,MAAO,+CACN,CACDD,MAAO,aACPC,MAAO,qBACN,CACDD,MAAO,eACPC,MAAO,oBACN,CACDD,MAAO,eACPC,MAAO,sBACN,CACDD,MAAO,eACPC,MAAO,+CACN,CACDD,MAAO,cACPC,MAAO,gBACN,CACDD,MAAO,gBACPC,MAAO,iDACN,CACDD,MAAO,kBACPC,MAAO,sCACN,CACDD,MAAO,gBACPC,MAAO,0CACN,CACDD,MAAO,kBACPC,MAAO,6BACN,CACDD,MAAO,cACPC,MAAO,eACN,CACDD,MAAO,aACPC,MAAO,IACPC,KAAM,OACL,CACDF,MAAO,SACPC,MAAO,IACPC,KAAM,UACL,CACDF,MAAO,eACPC,MAAO,IACPC,KAAM,gBACL,CACDF,MAAO,UACPC,MAAO,eACPC,KAAM,WACL,CACDF,MAAO,UACPC,MAAO,QACN,CACDD,MAAO,kBACPC,MAAO,QACN,CACDD,MAAO,oBACPC,MAAO,SACN,CACDD,MAAO,kBACPC,MAAO,SACN,CACDD,MAAO,qBACPC,MAAO,OACN,CACDD,MAAO,mBACPC,MAAO,OACN,CACDD,MAAO,UACPC,MAAO,oBACN,CACDD,MAAO,uBACPC,MAAO,sEACN,CACDD,MAAO,qBACPC,MAAO,udACN,CACDD,MAAO,mBACPC,MAAO,oiEACN,CACDD,MAAO,iBACPC,MAAO,8VACN,CACDD,MAAO,iBACPC,MAAO,6pBACN,CACDD,MAAO,UACPC,MAAO,oEACN,CACDD,MAAO,oBACPC,MAAO,QACN,CACDD,MAAO,kBACPC,MAA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","file":"static/js/113.ef892ab3.chunk.js","sourcesContent":["ace.define(\"ace/mode/red_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var RedHighlightRules = function RedHighlightRules() {\n    var compoundKeywords = \"\";\n    this.$rules = {\n      \"start\": [{\n        token: \"keyword.operator\",\n        regex: /\\s([\\-+%/=<>*]|(?:\\*\\*\\|\\/\\/|==|>>>?|<>|<<|=>|<=|=\\?))(\\s|(?=:))/\n      }, {\n        token: \"string.email\",\n        regex: /\\w[-\\w._]*\\@\\w[-\\w._]*/\n      }, {\n        token: \"value.time\",\n        regex: /\\b\\d+:\\d+(:\\d+)?/\n      }, {\n        token: \"string.url\",\n        regex: /\\w[-\\w_]*\\:(\\/\\/)?\\w[-\\w._]*(:\\d+)?/\n      }, {\n        token: \"value.date\",\n        regex: /(\\b\\d{1,4}[-/]\\d{1,2}[-/]\\d{1,2}|\\d{1,2}[-/]\\d{1,2}[-/]\\d{1,4})\\b/\n      }, {\n        token: \"value.tuple\",\n        regex: /\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(\\.\\d{1,3}){0,9}/\n      }, {\n        token: \"value.pair\",\n        regex: /[+-]?\\d+x[-+]?\\d+/\n      }, {\n        token: \"value.binary\",\n        regex: /\\b2#{([01]{8})+}/\n      }, {\n        token: \"value.binary\",\n        regex: /\\b64#{([\\w/=+])+}/\n      }, {\n        token: \"value.binary\",\n        regex: /(16)?#{([\\dabcdefABCDEF][\\dabcdefABCDEF])*}/\n      }, {\n        token: \"value.issue\",\n        regex: /#\\w[-\\w'*.]*/\n      }, {\n        token: \"value.numeric\",\n        regex: /[+-]?\\d['\\d]*(?:\\.\\d+)?e[-+]?\\d{1,3}\\%?(?!\\w)/\n      }, {\n        token: \"invalid.illegal\",\n        regex: /[+-]?\\d['\\d]*(?:\\.\\d+)?\\%?[a-zA-Z]/\n      }, {\n        token: \"value.numeric\",\n        regex: /[+-]?\\d['\\d]*(?:\\.\\d+)?\\%?(?![a-zA-Z])/\n      }, {\n        token: \"value.character\",\n        regex: /#\"(\\^[-@/_~^\"HKLM\\[]|.)\"/\n      }, {\n        token: \"string.file\",\n        regex: /%[-\\w\\.\\/]+/\n      }, {\n        token: \"string.tag\",\n        regex: /</,\n        next: \"tag\"\n      }, {\n        token: \"string\",\n        regex: /\"/,\n        next: \"string\"\n      }, {\n        token: \"string.other\",\n        regex: \"{\",\n        next: \"string.other\"\n      }, {\n        token: \"comment\",\n        regex: \"comment [[{]\",\n        next: \"comment\"\n      }, {\n        token: \"comment\",\n        regex: /;.+$/\n      }, {\n        token: \"paren.map-start\",\n        regex: \"#\\\\(\"\n      }, {\n        token: \"paren.block-start\",\n        regex: \"[\\\\[]\"\n      }, {\n        token: \"paren.block-end\",\n        regex: \"[\\\\]]\"\n      }, {\n        token: \"paren.parens-start\",\n        regex: \"[(]\"\n      }, {\n        token: \"paren.parens-end\",\n        regex: \"\\\\)\"\n      }, {\n        token: \"keyword\",\n        regex: \"/local|/external\"\n      }, {\n        token: \"keyword.preprocessor\",\n        regex: \"#(if|either|\" + \"switch|case|include|do|macrolocal|reset|process|trace)\"\n      }, {\n        token: \"constant.datatype!\",\n        regex: \"(?:datatype|unset|none|logic|block|paren|string|\" + \"file|url|char|integer|float|word|set-word|lit-word|\" + \"get-word|refinement|issue|native|action|op|function|\" + \"path|lit-path|set-path|get-path|routine|bitset|point|\" + \"object|typeset|error|vector|hash|pair|percent|tuple|\" + \"map|binary|time|tag|email|handle|date|image|event|\" + \"series|any-type|number|any-object|scalar|\" + \"any-string|any-word|any-function|any-block|any-list|\" + \"any-path|immediate|all-word|internal|external|default)!(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword.function\",\n        regex: \"\\\\b(?:collect|quote|on-parse-event|math|last|source|expand|\" + \"show|context|object|input|quit|dir|make-dir|cause-error|\" + \"error\\\\?|none\\\\?|block\\\\?|any-list\\\\?|word\\\\?|char\\\\?|\" + \"any-string\\\\?|series\\\\?|binary\\\\?|attempt|url\\\\?|\" + \"string\\\\?|suffix\\\\?|file\\\\?|object\\\\?|body-of|first|\" + \"second|third|mod|clean-path|dir\\\\?|to-red-file|\" + \"normalize-dir|list-dir|pad|empty\\\\?|dirize|offset\\\\?|\" + \"what-dir|expand-directives|load|split-path|change-dir|\" + \"to-file|path-thru|save|load-thru|View|float\\\\?|to-float|\" + \"charset|\\\\?|probe|set-word\\\\?|q|words-of|replace|repend|\" + \"react|function\\\\?|spec-of|unset\\\\?|halt|op\\\\?|\" + \"any-function\\\\?|to-paren|tag\\\\?|routine|class-of|\" + \"size-text|draw|handle\\\\?|link-tabs-to-parent|\" + \"link-sub-to-parent|on-face-deep-change*|\" + \"update-font-faces|do-actor|do-safe|do-events|pair\\\\?|\" + \"foreach-face|hex-to-rgb|issue\\\\?|alter|path\\\\?|\" + \"typeset\\\\?|datatype\\\\?|set-flag|layout|extract|image\\\\?|\" + \"get-word\\\\?|to-logic|to-set-word|to-block|center-face|\" + \"dump-face|request-font|request-file|request-dir|rejoin|\" + \"ellipsize-at|any-block\\\\?|any-object\\\\?|map\\\\?|keys-of|\" + \"a-an|also|parse-func-spec|help-string|what|routine\\\\?|\" + \"action\\\\?|native\\\\?|refinement\\\\?|common-substr|\" + \"red-complete-file|red-complete-path|unview|comment|\\\\?\\\\?|\" + \"fourth|fifth|values-of|bitset\\\\?|email\\\\?|get-path\\\\?|\" + \"hash\\\\?|integer\\\\?|lit-path\\\\?|lit-word\\\\?|logic\\\\?|\" + \"paren\\\\?|percent\\\\?|set-path\\\\?|time\\\\?|tuple\\\\?|date\\\\?|\" + \"vector\\\\?|any-path\\\\?|any-word\\\\?|number\\\\?|immediate\\\\?|\" + \"scalar\\\\?|all-word\\\\?|to-bitset|to-binary|to-char|to-email|\" + \"to-get-path|to-get-word|to-hash|to-integer|to-issue|\" + \"to-lit-path|to-lit-word|to-map|to-none|to-pair|to-path|\" + \"to-percent|to-refinement|to-set-path|to-string|to-tag|\" + \"to-time|to-typeset|to-tuple|to-unset|to-url|to-word|\" + \"to-image|to-date|parse-trace|modulo|eval-set-path|\" + \"extract-boot-args|flip-exe-flag|split|do-file|\" + \"exists-thru\\\\?|read-thru|do-thru|cos|sin|tan|acos|asin|\" + \"atan|atan2|sqrt|clear-reactions|dump-reactions|react\\\\?|\" + \"within\\\\?|overlap\\\\?|distance\\\\?|face\\\\?|metrics\\\\?|\" + \"get-scroller|insert-event-func|remove-event-func|\" + \"set-focus|help|fetch-help|about|ls|ll|pwd|cd|\" + \"red-complete-input|matrix)(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword.action\",\n        regex: \"\\\\b(?:to|remove|copy|insert|change|clear|move|poke|put|\" + \"random|reverse|sort|swap|take|trim|add|subtract|\" + \"divide|multiply|make|reflect|form|mold|modify|\" + \"absolute|negate|power|remainder|round|even\\\\?|odd\\\\?|\" + \"and~|complement|or~|xor~|append|at|back|find|skip|\" + \"tail|head|head\\\\?|index\\\\?|length\\\\?|next|pick|\" + \"select|tail\\\\?|delete|read|write)(?![-_!?\\\\w~])\"\n      }, {\n        token: \"keyword.native\",\n        regex: \"\\\\b(?:not|any|set|uppercase|lowercase|checksum|\" + \"try|catch|browse|throw|all|as|\" + \"remove-each|func|function|does|has|do|reduce|\" + \"compose|get|print|prin|equal\\\\?|not-equal\\\\?|\" + \"strict-equal\\\\?|lesser\\\\?|greater\\\\?|lesser-or-equal\\\\?|\" + \"greater-or-equal\\\\?|same\\\\?|type\\\\?|stats|bind|in|parse|\" + \"union|unique|intersect|difference|exclude|\" + \"complement\\\\?|dehex|negative\\\\?|positive\\\\?|max|min|\" + \"shift|to-hex|sine|cosine|tangent|arcsine|arccosine|\" + \"arctangent|arctangent2|NaN\\\\?|zero\\\\?|log-2|log-10|log-e|\" + \"exp|square-root|construct|value\\\\?|as-pair|\" + \"extend|debase|enbase|to-local-file|\" + \"wait|unset|new-line|new-line\\\\?|context\\\\?|set-env|\" + \"get-env|list-env|now|sign\\\\?|call|size\\\\?)(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword\",\n        regex: \"\\\\b(?:Red(?=\\\\s+\\\\[)|object|context|make|self|keep)(?![-!?\\\\w~])\"\n      }, {\n        token: \"variable.language\",\n        regex: \"this\"\n      }, {\n        token: \"keyword.control\",\n        regex: \"(?:while|if|return|case|unless|either|until|loop|repeat|\" + \"forever|foreach|forall|switch|break|continue|exit)(?![-!?\\\\w~])\"\n      }, {\n        token: \"constant.language\",\n        regex: \"\\\\b(?:true|false|on|off|yes|none|no)(?![-!?\\\\w~])\"\n      }, {\n        token: \"constant.numeric\",\n        regex: /\\bpi(?![^-_])/\n      }, {\n        token: \"constant.character\",\n        regex: \"\\\\b(space|tab|newline|cr|lf)(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\s(or|and|xor|is)\\s\"\n      }, {\n        token: \"variable.get-path\",\n        regex: /:\\w[-\\w'*.?!]*(\\/\\w[-\\w'*.?!]*)(\\/\\w[-\\w'*.?!]*)*/\n      }, {\n        token: \"variable.set-path\",\n        regex: /\\w[-\\w'*.?!]*(\\/\\w[-\\w'*.?!]*)(\\/\\w[-\\w'*.?!]*)*:/\n      }, {\n        token: \"variable.lit-path\",\n        regex: /'\\w[-\\w'*.?!]*(\\/\\w[-\\w'*.?!]*)(\\/\\w[-\\w'*.?!]*)*/\n      }, {\n        token: \"variable.path\",\n        regex: /\\w[-\\w'*.?!]*(\\/\\w[-\\w'*.?!]*)(\\/\\w[-\\w'*.?!]*)*/\n      }, {\n        token: \"variable.refinement\",\n        regex: /\\/\\w[-\\w'*.?!]*/\n      }, {\n        token: \"keyword.view.style\",\n        regex: \"\\\\b(?:window|base|button|text|field|area|check|\" + \"radio|progress|slider|camera|text-list|\" + \"drop-list|drop-down|panel|group-box|\" + \"tab-panel|h1|h2|h3|h4|h5|box|image|init)(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword.view.event\",\n        regex: \"\\\\b(?:detect|on-detect|time|on-time|drawing|on-drawing|\" + \"scroll|on-scroll|down|on-down|up|on-up|mid-down|\" + \"on-mid-down|mid-up|on-mid-up|alt-down|on-alt-down|\" + \"alt-up|on-alt-up|aux-down|on-aux-down|aux-up|\" + \"on-aux-up|wheel|on-wheel|drag-start|on-drag-start|\" + \"drag|on-drag|drop|on-drop|click|on-click|dbl-click|\" + \"on-dbl-click|over|on-over|key|on-key|key-down|\" + \"on-key-down|key-up|on-key-up|ime|on-ime|focus|\" + \"on-focus|unfocus|on-unfocus|select|on-select|\" + \"change|on-change|enter|on-enter|menu|on-menu|close|\" + \"on-close|move|on-move|resize|on-resize|moving|\" + \"on-moving|resizing|on-resizing|zoom|on-zoom|pan|\" + \"on-pan|rotate|on-rotate|two-tap|on-two-tap|\" + \"press-tap|on-press-tap|create|on-create|created|on-created)(?![-!?\\\\w~])\"\n      }, {\n        token: \"keyword.view.option\",\n        regex: \"\\\\b(?:all-over|center|color|default|disabled|down|\" + \"flags|focus|font|font-color|font-name|\" + \"font-size|hidden|hint|left|loose|name|\" + \"no-border|now|rate|react|select|size|space)(?![-!?\\\\w~])\"\n      }, {\n        token: \"constant.other.colour\",\n        regex: \"\\\\b(?:Red|white|transparent|\" + \"black|gray|aqua|beige|blue|brick|brown|coal|coffee|\" + \"crimson|cyan|forest|gold|green|ivory|khaki|leaf|linen|\" + \"magenta|maroon|mint|navy|oldrab|olive|orange|papaya|\" + \"pewter|pink|purple|reblue|rebolor|sienna|silver|sky|\" + \"snow|tanned|teal|violet|water|wheat|yello|yellow|glass)(?![-!?\\\\w~])\"\n      }, {\n        token: \"variable.get-word\",\n        regex: /\\:\\w[-\\w'*.?!]*/\n      }, {\n        token: \"variable.set-word\",\n        regex: /\\w[-\\w'*.?!]*\\:/\n      }, {\n        token: \"variable.lit-word\",\n        regex: /'\\w[-\\w'*.?!]*/\n      }, {\n        token: \"variable.word\",\n        regex: /\\b\\w+[-\\w'*.!?]*/\n      }, {\n        caseInsensitive: true\n      }],\n      \"string\": [{\n        token: \"string\",\n        regex: /\"/,\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"string.other\": [{\n        token: \"string.other\",\n        regex: /}/,\n        next: \"start\"\n      }, {\n        defaultToken: \"string.other\"\n      }],\n      \"tag\": [{\n        token: \"string.tag\",\n        regex: />/,\n        next: \"start\"\n      }, {\n        defaultToken: \"string.tag\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        regex: /}/,\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n  };\n\n  oop.inherits(RedHighlightRules, TextHighlightRules);\n  exports.RedHighlightRules = RedHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/red\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/red_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/matching_brace_outdent\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var RedHighlightRules = acequire(\"./red_highlight_rules\").RedHighlightRules;\n  var RedFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = acequire(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = RedHighlightRules;\n    this.foldingRules = new RedFoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.blockCommentStart = \"comment {\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\[\\(]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/red\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}