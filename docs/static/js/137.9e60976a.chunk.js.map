{"version":3,"sources":["../node_modules/brace/mode/tex.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","TexHighlightRules","textClass","this","$rules","token","regex","next","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","suppressHighlighting","HighlightRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","allowAutoInsert","$id"],"mappings":"+HAAAA,IAAIC,OAAO,+BAAgC,CAAC,UAAW,UAAW,SAAU,cAAe,eAAgB,kCAAkC,SAAUC,EAAUC,EAASC,GACxK,aAEA,IAAIC,EAAMH,EAAS,cAEfI,GADOJ,EAAS,eACKA,EAAS,0BAA0BI,oBAExDC,EAAoB,SAA2BC,GAC5CA,IAAWA,EAAY,QAC5BC,KAAKC,OAAS,CACZ,MAAS,CAAC,CACRC,MAAO,UACPC,MAAO,QACN,CACDD,MAAOH,EAEPI,MAAO,oBACN,CACDD,MAAO,UAEPC,MAAO,mMACPC,KAAM,WACL,CACDF,MAAO,UAEPC,MAAO,qCACN,CACDD,MAAO,yBACPC,MAAO,SACN,CACDD,MAAO,yBACPC,MAAO,WACN,CACDD,MAAOH,EACPI,MAAO,SAET,QAAW,CAAC,CACVD,MAAO,UACPC,MAAO,OACPC,KAAM,SACL,CACDF,MAAO,WAAaH,EAEpBI,MAAO,oBACN,CACDD,MAAO,UAEPC,MAAO,oMACN,CACDD,MAAO,UAEPC,MAAO,oCACPC,KAAM,SACL,CACDF,MAAO,yBACPC,MAAO,SACN,CACDD,MAAO,yBACPC,MAAO,UACN,CACDD,MAAO,yBACPC,MAAO,IACPC,KAAM,SACL,CACDF,MAAO,WAAaH,EACpBI,MAAO,QACN,CACDD,MAAO,WAAaH,EACpBI,MAAO,WAKbP,EAAIS,SAASP,EAAmBD,GAChCH,EAAQI,kBAAoBA,KAE9BP,IAAIC,OAAO,kCAAmC,CAAC,UAAW,UAAW,SAAU,cAAc,SAAUC,EAAUC,EAASC,GACxH,aAEA,IAAIW,EAAQb,EAAS,YAAYa,MAE7BC,EAAuB,cAE3B,WACEP,KAAKQ,aAAe,SAAUC,EAAMC,GAClC,QAAK,QAAQC,KAAKF,IACX,SAASE,KAAKD,IAGvBV,KAAKY,YAAc,SAAUC,EAAKC,GAChC,IACIC,EADOF,EAAIG,QAAQF,GACNC,MAAM,YACvB,IAAKA,EAAO,OAAO,EACnB,IAAIE,EAASF,EAAM,GAAGG,OAClBC,EAAeN,EAAIO,oBAAoB,CACzCN,IAAKA,EACLG,OAAQA,IAEV,IAAKE,GAAgBA,EAAaL,KAAOA,EAAK,OAAO,EACrD,IAAIO,EAASrB,KAAKsB,WAAWT,EAAIG,QAAQG,EAAaL,MACtDD,EAAIU,QAAQ,IAAIjB,EAAMQ,EAAK,EAAGA,EAAKG,EAAS,GAAII,IAGlDrB,KAAKsB,WAAa,SAAUb,GAC1B,OAAOA,EAAKM,MAAM,QAAQ,MAE3BS,KAAKjB,EAAqBkB,WAC7B/B,EAAQa,qBAAuBA,KAEjChB,IAAIC,OAAO,eAAgB,CAAC,UAAW,UAAW,SAAU,cAAe,gBAAiB,gCAAiC,+BAAgC,oCAAoC,SAAUC,EAAUC,EAASC,GAC5N,aAEA,IAAIC,EAAMH,EAAS,cACfiC,EAAWjC,EAAS,UAAUkC,KAC9B9B,EAAqBJ,EAAS,0BAA0BI,mBACxDC,EAAoBL,EAAS,yBAAyBK,kBACtDS,EAAuBd,EAAS,4BAA4Bc,qBAE5DoB,EAAO,SAAcC,GACG5B,KAAK6B,eAA3BD,EAA4C/B,EAA8CC,EAC9FE,KAAK8B,SAAW,IAAIvB,EACpBP,KAAK+B,WAAa/B,KAAKgC,mBAGzBpC,EAAIS,SAASsB,EAAMD,GACnB,WACE1B,KAAKiC,iBAAmB,IAExBjC,KAAKkC,kBAAoB,SAAUC,EAAO1B,EAAM2B,GAC9C,OAAOpC,KAAKsB,WAAWb,IAGzBT,KAAKqC,gBAAkB,WACrB,OAAO,GAGTrC,KAAKsC,IAAM,gBACVd,KAAKG,EAAKF,WACb/B,EAAQiC,KAAOA","file":"static/js/137.9e60976a.chunk.js","sourcesContent":["ace.define(\"ace/mode/tex_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var lang = acequire(\"../lib/lang\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TexHighlightRules = function TexHighlightRules(textClass) {\n    if (!textClass) textClass = \"text\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"%.*$\"\n      }, {\n        token: textClass,\n        // non-command\n        regex: \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\",\n        next: \"nospell\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: textClass,\n        regex: \"\\\\s+\"\n      }],\n      \"nospell\": [{\n        token: \"comment\",\n        regex: \"%.*$\",\n        next: \"start\"\n      }, {\n        token: \"nospell.\" + textClass,\n        // non-command\n        regex: \"\\\\\\\\[$&%#\\\\{\\\\}]\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:documentclass|usepackage|newcounter|setcounter|addtocounter|value|arabic|stepcounter|newenvironment|renewenvironment|ref|vref|eqref|pageref|label|cite[a-zA-Z]*|tag|begin|end|bibitem)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // command\n        regex: \"\\\\\\\\(?:[a-zA-Z0-9]+|[^a-zA-Z0-9])\",\n        next: \"start\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"[\\\\])]\"\n      }, {\n        token: \"paren.keyword.operator\",\n        regex: \"}\",\n        next: \"start\"\n      }, {\n        token: \"nospell.\" + textClass,\n        regex: \"\\\\s+\"\n      }, {\n        token: \"nospell.\" + textClass,\n        regex: \"\\\\w+\"\n      }]\n    };\n  };\n\n  oop.inherits(TexHighlightRules, TextHighlightRules);\n  exports.TexHighlightRules = TexHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/tex\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/text_highlight_rules\", \"ace/mode/tex_highlight_rules\", \"ace/mode/matching_brace_outdent\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var TexHighlightRules = acequire(\"./tex_highlight_rules\").TexHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function Mode(suppressHighlighting) {\n    if (suppressHighlighting) this.HighlightRules = TextHighlightRules;else this.HighlightRules = TexHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"%\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      return this.$getIndent(line);\n    };\n\n    this.allowAutoInsert = function () {\n      return false;\n    };\n\n    this.$id = \"ace/mode/tex\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}