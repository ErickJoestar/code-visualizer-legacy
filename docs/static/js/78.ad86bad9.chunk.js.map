{"version":3,"sources":["../node_modules/brace/mode/logiql.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","LogiQLHighlightRules","this","$rules","start","token","regex","push","next","defaultToken","comment","include","normalizeRules","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","MatchingBraceOutdent","checkOutdent","input","test","autoOutdent","doc","match","column","openBracePos","findMatchingBracket","$getIndent","replace","TextMode","Mode","TokenIterator","CstyleBehaviour","HighlightRules","foldingRules","$outdent","$behaviour","lineCommentStart","blockComment","end","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","prevLine","lastIndexOf","startRange","getMatching","undefined","selection","lead","tok","startToken","getTokenAt","it","step","stepForward","stepBackward","col","getCurrentTokenColumn","getCurrentTokenRow","value","$id"],"mappings":"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","file":"static/js/78.ad86bad9.chunk.js","sourcesContent":["ace.define(\"ace/mode/logiql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LogiQLHighlightRules = function LogiQLHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'comment.block',\n        regex: '/\\\\*',\n        push: [{\n          token: 'comment.block',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block'\n        }]\n      }, {\n        token: 'comment.single',\n        regex: '//.*'\n      }, {\n        token: 'constant.numeric',\n        regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\n      }, {\n        token: 'string',\n        regex: '\"',\n        push: [{\n          token: 'string',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: 'constant.language',\n        regex: '\\\\b(true|false)\\\\b'\n      }, {\n        token: 'entity.name.type.logicblox',\n        regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\n      }, {\n        token: 'keyword.start',\n        regex: '->',\n        comment: 'Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '-->',\n        comment: 'Level 1 Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '<-',\n        comment: 'Rule'\n      }, {\n        token: 'keyword.start',\n        regex: '<--',\n        comment: 'Level 1 Rule'\n      }, {\n        token: 'keyword.end',\n        regex: '\\\\.',\n        comment: 'Terminator'\n      }, {\n        token: 'keyword.other',\n        regex: '!',\n        comment: 'Negation'\n      }, {\n        token: 'keyword.other',\n        regex: ',',\n        comment: 'Conjunction'\n      }, {\n        token: 'keyword.other',\n        regex: ';',\n        comment: 'Disjunction'\n      }, {\n        token: 'keyword.operator',\n        regex: '<=|>=|!=|<|>',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.other',\n        regex: '@',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.operator',\n        regex: '\\\\+|-|\\\\*|/',\n        comment: 'Arithmetic operations'\n      }, {\n        token: 'keyword',\n        regex: '::',\n        comment: 'Colon colon'\n      }, {\n        token: 'support.function',\n        regex: '\\\\b(agg\\\\s*<<)',\n        push: [{\n          include: '$self'\n        }, {\n          token: 'support.function',\n          regex: '>>',\n          next: 'pop'\n        }]\n      }, {\n        token: 'storage.modifier',\n        regex: '\\\\b(lang:[\\\\w:]*)'\n      }, {\n        token: ['storage.type', 'text'],\n        regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\n      }, {\n        token: 'entity.name',\n        regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\n      }, {\n        token: 'variable.parameter',\n        regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(LogiQLHighlightRules, TextHighlightRules);\n  exports.LogiQLHighlightRules = LogiQLHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/logiql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/logiql_highlight_rules\", \"ace/mode/folding/coffee\", \"ace/token_iterator\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/matching_brace_outdent\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var LogiQLHighlightRules = acequire(\"./logiql_highlight_rules\").LogiQLHighlightRules;\n  var FoldMode = acequire(\"./folding/coffee\").FoldMode;\n  var TokenIterator = acequire(\"../token_iterator\").TokenIterator;\n  var Range = acequire(\"../range\").Range;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function Mode() {\n    this.HighlightRules = LogiQLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n      if (/comment|string/.test(endState)) return indent;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\") return indent;\n      var match = line.match();\n      if (/(-->|<--|<-|->|{)\\s*$/.test(line)) indent += tab;\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (this.$outdent.checkOutdent(line, input)) return true;\n      if (input !== \"\\n\" && input !== \"\\r\\n\") return false;\n      if (!/^\\s+/.test(line)) return false;\n      return true;\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      if (this.$outdent.autoOutdent(doc, row)) return;\n      var prevLine = doc.getLine(row);\n      var match = prevLine.match(/^\\s+/);\n      var column = prevLine.lastIndexOf(\".\") + 1;\n      if (!match || !row || !column) return 0;\n      var line = doc.getLine(row + 1);\n      var startRange = this.getMatching(doc, {\n        row: row,\n        column: column\n      });\n      if (!startRange || startRange.start.row == row) return 0;\n      column = match[0].length;\n      var indent = this.$getIndent(doc.getLine(startRange.start.row));\n      doc.replace(new Range(row + 1, 0, row + 1, column), indent);\n    };\n\n    this.getMatching = function (session, row, column) {\n      if (row == undefined) row = session.selection.lead;\n\n      if (typeof row == \"object\") {\n        column = row.column;\n        row = row.row;\n      }\n\n      var startToken = session.getTokenAt(row, column);\n      var KW_START = \"keyword.start\",\n          KW_END = \"keyword.end\";\n      var tok;\n      if (!startToken) return;\n\n      if (startToken.type == KW_START) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepForward;\n      } else if (startToken.type == KW_END) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepBackward;\n      } else return;\n\n      while (tok = it.step()) {\n        if (tok.type == KW_START || tok.type == KW_END) break;\n      }\n\n      if (!tok || tok.type == startToken.type) return;\n      var col = it.getCurrentTokenColumn();\n      var row = it.getCurrentTokenRow();\n      return new Range(row, col, row, col + tok.value.length);\n    };\n\n    this.$id = \"ace/mode/logiql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}