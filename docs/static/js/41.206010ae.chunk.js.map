{"version":3,"sources":["../node_modules/brace/mode/fortran.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","FortranHighlightRules","keywordMapper","this","createKeywordMapper","strPre","integer","pointFloat","floatNumber","stringEscape","$rules","token","regex","next","defaultToken","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CStyleFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"static/js/41.206010ae.chunk.js","sourcesContent":["ace.define(\"ace/mode/fortran_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var FortranHighlightRules = function FortranHighlightRules() {\n    var keywords = \"call|case|contains|continue|cycle|do|else|elseif|end|enddo|endif|function|\" + \"if|implicit|in|include|inout|intent|module|none|only|out|print|program|return|\" + \"select|status|stop|subroutine|\" + \"return|then|use|while|write|\" + \"CALL|CASE|CONTAINS|CONTINUE|CYCLE|DO|ELSE|ELSEIF|END|ENDDO|ENDIF|FUNCTION|\" + \"IF|IMPLICIT|IN|INCLUDE|INOUT|INTENT|MODULE|NONE|ONLY|OUT|PRINT|PROGRAM|RETURN|\" + \"SELECT|STATUS|STOP|SUBROUTINE|\" + \"RETURN|THEN|USE|WHILE|WRITE\";\n    var keywordOperators = \"and|or|not|eq|ne|gt|ge|lt|le|\" + \"AND|OR|NOT|EQ|NE|GT|GE|LT|LE\";\n    var builtinConstants = \"true|false|TRUE|FALSE\";\n    var builtinFunctions = \"abs|achar|acos|acosh|adjustl|adjustr|aimag|aint|all|allocate|\" + \"anint|any|asin|asinh|associated|atan|atan2|atanh|\" + \"bessel_j0|bessel_j1|bessel_jn|bessel_y0|bessel_y1|bessel_yn|\" + \"bge|bgt|bit_size|ble|blt|btest|ceiling|char|cmplx|conjg|cos|cosh|\" + \"count|cpu_time|cshift|date_and_time|dble|deallocate|digits|dim|dot_product|dprod|\" + \"dshiftl|dshiftr|dsqrt|eoshift|epsilon|erf|erfc|erfc_scaled|exp|float|floor|\" + \"format|fraction|gamma|input|len|lge|lgt|lle|llt|log|log10|maskl|maskr|matmul|max|maxloc|maxval|\" + \"merge|min|minloc|minval|mod|modulo|nint|not|norm2|null|nullify|pack|parity|popcnt|poppar|\" + \"precision|present|product|radix|random_number|random_seed|range|repeat|reshape|round|\" + \"rrspacing|same_type_as|scale|scan|selected_char_kind|selected_int_kind|selected_real_kind|\" + \"set_exponent|shape|shifta|shiftl|shiftr|sign|sin|sinh|size|sngl|spacing|spread|\" + \"sqrt|sum|system_clock|tan|tanh|tiny|trailz|transfer|transpose|trim|ubound|unpack|verify|\" + \"ABS|ACHAR|ACOS|ACOSH|ADJUSTL|ADJUSTR|AIMAG|AINT|ALL|ALLOCATE|\" + \"ANINT|ANY|ASIN|ASINH|ASSOCIATED|ATAN|ATAN2|ATANH|\" + \"BESSEL_J0|BESSEL_J1|BESSEL_JN|BESSEL_Y0|BESSEL_Y1|BESSEL_YN|\" + \"BGE|BGT|BIT_SIZE|BLE|BLT|BTEST|CEILING|CHAR|CMPLX|CONJG|COS|COSH|\" + \"COUNT|CPU_TIME|CSHIFT|DATE_AND_TIME|DBLE|DEALLOCATE|DIGITS|DIM|DOT_PRODUCT|DPROD|\" + \"DSHIFTL|DSHIFTR|DSQRT|EOSHIFT|EPSILON|ERF|ERFC|ERFC_SCALED|EXP|FLOAT|FLOOR|\" + \"FORMAT|FRACTION|GAMMA|INPUT|LEN|LGE|LGT|LLE|LLT|LOG|LOG10|MASKL|MASKR|MATMUL|MAX|MAXLOC|MAXVAL|\" + \"MERGE|MIN|MINLOC|MINVAL|MOD|MODULO|NINT|NOT|NORM2|NULL|NULLIFY|PACK|PARITY|POPCNT|POPPAR|\" + \"PRECISION|PRESENT|PRODUCT|RADIX|RANDOM_NUMBER|RANDOM_SEED|RANGE|REPEAT|RESHAPE|ROUND|\" + \"RRSPACING|SAME_TYPE_AS|SCALE|SCAN|SELECTED_CHAR_KIND|SELECTED_INT_KIND|SELECTED_REAL_KIND|\" + \"SET_EXPONENT|SHAPE|SHIFTA|SHIFTL|SHIFTR|SIGN|SIN|SINH|SIZE|SNGL|SPACING|SPREAD|\" + \"SQRT|SUM|SYSTEM_CLOCK|TAN|TANH|TINY|TRAILZ|TRANSFER|TRANSPOSE|TRIM|UBOUND|UNPACK|VERIFY\";\n    var storageType = \"logical|character|integer|real|type|\" + \"LOGICAL|CHARACTER|INTEGER|REAL|TYPE\";\n    var storageModifiers = \"allocatable|dimension|intent|parameter|pointer|target|private|public|\" + \"ALLOCATABLE|DIMENSION|INTENT|PARAMETER|POINTER|TARGET|PRIVATE|PUBLIC\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords,\n      \"keyword.operator\": keywordOperators,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"!.*$\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: strPre + '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: strPre + '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line ''' string start\n        regex: strPre + \"'{3}\",\n        next: \"qstring3\"\n      }, {\n        token: \"string\",\n        // ' string\n        regex: strPre + \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: \"keyword\",\n        // pre-compiler directives\n        regex: \"#\\\\s*(?:include|import|define|undef|INCLUDE|IMPORT|DEFINE|UNDEF)\\\\b\"\n      }, {\n        token: \"keyword\",\n        // special case pre-compiler directive\n        regex: \"#\\\\s*(?:endif|ifdef|else|elseif|ifndef|ENDIF|IFDEF|ELSE|ELSEIF|IFNDEF)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n\n  oop.inherits(FortranHighlightRules, TextHighlightRules);\n  exports.FortranHighlightRules = FortranHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/fortran\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/fortran_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var FortranHighlightRules = acequire(\"./fortran_highlight_rules\").FortranHighlightRules;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n  var Range = acequire(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = FortranHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"!\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"return\": 1,\n      \"break\": 1,\n      \"continue\": 1,\n      \"RETURN\": 1,\n      \"BREAK\": 1,\n      \"CONTINUE\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/fortran\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}