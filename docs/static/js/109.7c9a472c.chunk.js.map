{"version":3,"sources":["../node_modules/brace/mode/python.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywordMapper","this","createKeywordMapper","strPre","integer","pointFloat","floatNumber","stringEscape","$rules","token","regex","next","defaultToken","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","match","getLine","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"static/js/109.7c9a472c.chunk.js","sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PythonHighlightRules = function PythonHighlightRules() {\n    var keywords = \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" + \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" + \"raise|return|try|while|with|yield|async|await\";\n    var builtinConstants = \"True|False|None|NotImplemented|Ellipsis|__debug__\";\n    var builtinFunctions = \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" + \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" + \"binfile|iter|property|tuple|bool|filter|len|range|type|bytearray|\" + \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" + \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" + \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" + \"__import__|complex|hash|min|set|apply|delattr|help|next|setattr|\" + \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords\n    }, \"identifier\");\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: strPre + '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: strPre + '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line ''' string start\n        regex: strPre + \"'{3}\",\n        next: \"qstring3\"\n      }, {\n        token: \"string\",\n        // ' string\n        regex: strPre + \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line ''' string end\n        regex: \"'{3}\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n\n  oop.inherits(PythonHighlightRules, TextHighlightRules);\n  exports.PythonHighlightRules = PythonHighlightRules;\n});\nace.define(\"ace/mode/folding/pythonic\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, match.index);\n        if (match[2]) return this.indentationBlock(session, row, match.index + match[2].length);\n        return this.indentationBlock(session, row);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/python\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/python_highlight_rules\", \"ace/mode/folding/pythonic\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var PythonHighlightRules = acequire(\"./python_highlight_rules\").PythonHighlightRules;\n  var PythonFoldMode = acequire(\"./folding/pythonic\").FoldMode;\n  var Range = acequire(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"pass\": 1,\n      \"return\": 1,\n      \"raise\": 1,\n      \"break\": 1,\n      \"continue\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}