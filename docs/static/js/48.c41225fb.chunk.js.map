{"version":3,"sources":["../node_modules/brace/mode/golang.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","GolangHighlightRules","keywordMapper","createKeywordMapper","stringEscapeRe","replace","val","length","type","slice","value","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","openBracePos","findMatchingBracket","indent","$getIndent","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","$id"],"mappings":"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","file":"static/js/48.c41225fb.chunk.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function DocCommentHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/golang_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var GolangHighlightRules = function GolangHighlightRules() {\n    var keywords = \"else|break|case|return|goto|if|const|select|\" + \"continue|struct|default|switch|for|range|\" + \"func|import|package|chan|defer|fallthrough|go|interface|map|range|\" + \"select|type|var\";\n    var builtinTypes = \"string|uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|\" + \"float64|complex64|complex128|byte|rune|uint|int|uintptr|bool|error\";\n    var builtinFunctions = \"new|close|cap|copy|panic|panicln|print|println|len|make|delete|real|recover|imag|append\";\n    var builtinConstants = \"nil|true|false|iota\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": builtinConstants,\n      \"support.function\": builtinFunctions,\n      \"support.type\": builtinTypes\n    }, \"\");\n    var stringEscapeRe = \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(/\\\\h/g, \"[a-fA-F\\\\d]\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment.start\",\n        // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: /\"(?:[^\"\\\\]|\\\\.)*?\"/\n      }, {\n        token: \"string\",\n        // raw\n        regex: '`',\n        next: \"bqstring\"\n      }, {\n        token: \"constant.numeric\",\n        // rune\n        regex: \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" + stringEscapeRe.replace('\"', '') + \")'\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: [\"keyword\", \"text\", \"entity.name.function\"],\n        regex: \"(func)(\\\\s+)([a-zA-Z_$][a-zA-Z0-9_$]*)\\\\b\"\n      }, {\n        token: function token(val) {\n          if (val[val.length - 1] == \"(\") {\n            return [{\n              type: keywordMapper(val.slice(0, -1)) || \"support.function\",\n              value: val.slice(0, -1)\n            }, {\n              type: \"paren.lparen\",\n              value: val.slice(-1)\n            }];\n          }\n\n          return keywordMapper(val) || \"identifier\";\n        },\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment.end\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"bqstring\": [{\n        token: \"string\",\n        regex: '`',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n  };\n\n  oop.inherits(GolangHighlightRules, TextHighlightRules);\n  exports.GolangHighlightRules = GolangHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/golang\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/golang_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var GolangHighlightRules = acequire(\"./golang_highlight_rules\").GolangHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = GolangHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    }; //end getNextLineIndent\n\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/golang\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}