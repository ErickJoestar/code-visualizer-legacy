{"version":3,"sources":["../node_modules/brace/mode/toml.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","TomlHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","next","defaultToken","inherits","Range","BaseFoldMode","FoldMode","foldingStartMarker","getFoldWidgetRange","session","foldStyle","row","re","line","getLine","m","match","startName","startColumn","length","maxRow","getLength","startRow","endRow","test","lastIndexOf","endColumn","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"mappings":"+HAAAA,IAAIC,OAAO,gCAAiC,CAAC,UAAW,UAAW,SAAU,cAAe,kCAAkC,SAAUC,EAAUC,EAASC,GACzJ,aAEA,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBAExDC,EAAqB,WACvB,IAAIC,EAAgBC,KAAKC,oBAAoB,CAC3C,4BAA6B,cAC5B,cAEHD,KAAKE,OAAS,CACZ,MAAS,CAAC,CACRC,MAAO,eACPC,MAAO,QACN,CACDD,MAAO,SACPC,MAAO,SACPC,KAAM,YACL,CACDF,MAAO,CAAC,0BACRC,MAAO,oCACN,CACDD,MAAO,CAAC,0BACRC,MAAO,8BACN,CACDD,MAAOJ,EACPK,MAjBe,yDAkBd,CACDD,MAAO,oBACPC,MAAO,kDACN,CACDD,MAAO,wBACPC,MAAO,sBAET,SAAY,CAAC,CACXD,MAAO,SACPC,MAAO,QACPC,KAAM,YACL,CACDF,MAAO,2BACPC,MAAO,mBACN,CACDD,MAAO,SACPC,MAAO,MACPC,KAAM,SACL,CACDC,aAAc,aAKpBV,EAAIW,SAAST,EAAoBD,GACjCH,EAAQI,mBAAqBA,KAE/BP,IAAIC,OAAO,uBAAwB,CAAC,UAAW,UAAW,SAAU,cAAe,YAAa,+BAA+B,SAAUC,EAAUC,EAASC,GAC1J,aAEA,IAAIC,EAAMH,EAAS,iBACfe,EAAQf,EAAS,eAAee,MAChCC,EAAehB,EAAS,eAAeiB,SAEvCA,EAAWhB,EAAQgB,SAAW,aAElCd,EAAIW,SAASG,EAAUD,GACvB,WACET,KAAKW,mBAAqB,gCAE1BX,KAAKY,mBAAqB,SAAUC,EAASC,EAAWC,GACtD,IAAIC,EAAKhB,KAAKW,mBACVM,EAAOJ,EAAQK,QAAQH,GACvBI,EAAIF,EAAKG,MAAMJ,GACnB,GAAKG,EAAL,CAOA,IANA,IAAIE,EAAYF,EAAE,GAAK,IACnBG,EAAcL,EAAKM,OACnBC,EAASX,EAAQY,YACjBC,EAAWX,EACXY,EAASZ,IAEJA,EAAMS,GAEb,GADAP,EAAOJ,EAAQK,QAAQH,IACnB,QAAQa,KAAKX,GAAjB,CAEA,IADAE,EAAIF,EAAKG,MAAMJ,KAC6B,IAAnCG,EAAE,GAAGU,YAAYR,EAAW,GAAU,MAC/CM,EAASZ,EAGX,GAAIY,EAASD,EAAU,CACrB,IAAII,EAAYjB,EAAQK,QAAQS,GAAQJ,OACxC,OAAO,IAAIf,EAAMkB,EAAUJ,EAAaK,EAAQG,OAGnDC,KAAKrB,EAASsB,cAEnBzC,IAAIC,OAAO,gBAAiB,CAAC,UAAW,UAAW,SAAU,cAAe,gBAAiB,gCAAiC,yBAAyB,SAAUC,EAAUC,EAASC,GAClL,aAEA,IAAIC,EAAMH,EAAS,cACfwC,EAAWxC,EAAS,UAAUyC,KAC9BpC,EAAqBL,EAAS,0BAA0BK,mBACxDY,EAAWjB,EAAS,iBAAiBiB,SAErCwB,EAAO,WACTlC,KAAKmC,eAAiBrC,EACtBE,KAAKoC,aAAe,IAAI1B,EACxBV,KAAKqC,WAAarC,KAAKsC,mBAGzB1C,EAAIW,SAAS2B,EAAMD,GACnB,WACEjC,KAAKuC,iBAAmB,IACxBvC,KAAKwC,IAAM,iBACVT,KAAKG,EAAKF,WACbtC,EAAQwC,KAAOA","file":"static/js/140.7e8bcb39.chunk.js","sourcesContent":["ace.define(\"ace/mode/toml_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TomlHighlightRules = function TomlHighlightRules() {\n    var keywordMapper = this.createKeywordMapper({\n      \"constant.language.boolean\": \"true|false\"\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\xA1-\\uFFFF][a-zA-Z\\\\d\\\\$_\\xA1-\\uFFFF]*\\\\b\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.toml\",\n        regex: /#.*$/\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: [\"variable.keygroup.toml\"],\n        regex: \"(?:^\\\\s*)(\\\\[\\\\[([^\\\\]]+)\\\\]\\\\])\"\n      }, {\n        token: [\"variable.keygroup.toml\"],\n        regex: \"(?:^\\\\s*)(\\\\[([^\\\\]]+)\\\\])\"\n      }, {\n        token: keywordMapper,\n        regex: identifierRe\n      }, {\n        token: \"support.date.toml\",\n        regex: \"\\\\d{4}-\\\\d{2}-\\\\d{2}(T)\\\\d{2}:\\\\d{2}:\\\\d{2}(Z)\"\n      }, {\n        token: \"constant.numeric.toml\",\n        regex: \"-?\\\\d+(\\\\.?\\\\d+)?\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"constant.language.escape\",\n        regex: '\\\\\\\\[0tnr\"\\\\\\\\]'\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n  };\n\n  oop.inherits(TomlHighlightRules, TextHighlightRules);\n  exports.TomlHighlightRules = TomlHighlightRules;\n});\nace.define(\"ace/mode/folding/ini\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /^\\s*\\[([^\\])]*)]\\s*(?:$|[;#])/;\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var re = this.foldingStartMarker;\n      var line = session.getLine(row);\n      var m = line.match(re);\n      if (!m) return;\n      var startName = m[1] + \".\";\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        if (/^\\s*$/.test(line)) continue;\n        m = line.match(re);\n        if (m && m[1].lastIndexOf(startName, 0) !== 0) break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/toml\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/toml_highlight_rules\", \"ace/mode/folding/ini\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var TomlHighlightRules = acequire(\"./toml_highlight_rules\").TomlHighlightRules;\n  var FoldMode = acequire(\"./folding/ini\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = TomlHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/toml\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}