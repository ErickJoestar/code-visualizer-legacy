{"version":3,"sources":["../node_modules/brace/mode/perl.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PerlHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","next","defaultToken","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","match","getLine","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","start","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","lineStartOnly","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","$id"],"mappings":"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","file":"static/js/99.9c5b6971.chunk.js","sourcesContent":["ace.define(\"ace/mode/perl_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PerlHighlightRules = function PerlHighlightRules() {\n    var keywords = \"base|constant|continue|else|elsif|for|foreach|format|goto|if|last|local|my|next|\" + \"no|package|parent|redo|acequire|scalar|sub|unless|until|while|use|vars\";\n    var buildinConstants = \"ARGV|ENV|INC|SIG\";\n    var builtinFunctions = \"getprotobynumber|getprotobyname|getservbyname|gethostbyaddr|\" + \"gethostbyname|getservbyport|getnetbyaddr|getnetbyname|getsockname|\" + \"getpeername|setpriority|getprotoent|setprotoent|getpriority|\" + \"endprotoent|getservent|setservent|endservent|sethostent|socketpair|\" + \"getsockopt|gethostent|endhostent|setsockopt|setnetent|quotemeta|\" + \"localtime|prototype|getnetent|endnetent|rewinddir|wantarray|getpwuid|\" + \"closedir|getlogin|readlink|endgrent|getgrgid|getgrnam|shmwrite|\" + \"shutdown|readline|endpwent|setgrent|readpipe|formline|truncate|\" + \"dbmclose|syswrite|setpwent|getpwnam|getgrent|getpwent|ucfirst|sysread|\" + \"setpgrp|shmread|sysseek|sysopen|telldir|defined|opendir|connect|\" + \"lcfirst|getppid|binmode|syscall|sprintf|getpgrp|readdir|seekdir|\" + \"waitpid|reverse|unshift|symlink|dbmopen|semget|msgrcv|rename|listen|\" + \"chroot|msgsnd|shmctl|accept|unpack|exists|fileno|shmget|system|\" + \"unlink|printf|gmtime|msgctl|semctl|values|rindex|substr|splice|\" + \"length|msgget|select|socket|return|caller|delete|alarm|ioctl|index|\" + \"undef|lstat|times|srand|chown|fcntl|close|write|umask|rmdir|study|\" + \"sleep|chomp|untie|print|utime|mkdir|atan2|split|crypt|flock|chmod|\" + \"BEGIN|bless|chdir|semop|shift|reset|link|stat|chop|grep|fork|dump|\" + \"join|open|tell|pipe|exit|glob|warn|each|bind|sort|pack|eval|push|\" + \"keys|getc|kill|seek|sqrt|send|wait|rand|tied|read|time|exec|recv|\" + \"eof|chr|int|ord|exp|pos|pop|sin|log|abs|oct|hex|tie|cos|vec|END|ref|\" + \"map|die|uc|lc|do\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"support.function\": builtinFunctions\n    }, \"identifier\");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc\",\n        regex: \"^=(?:begin|item)\\\\b\",\n        next: \"block_comment\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: '[\"].*\\\\\\\\$',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: \"['].*\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0x[0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"%#|\\\\$#|\\\\.\\\\.\\\\.|\\\\|\\\\|=|>>=|<<=|<=>|&&=|=>|!~|\\\\^=|&=|\\\\|=|\\\\.=|x=|%=|\\\\/=|\\\\*=|\\\\-=|\\\\+=|=~|\\\\*\\\\*|\\\\-\\\\-|\\\\.\\\\.|\\\\|\\\\||&&|\\\\+\\\\+|\\\\->|!=|==|>=|<=|>>|<<|,|=|\\\\?\\\\:|\\\\^|\\\\||x|%|\\\\/|\\\\*|<|&|\\\\\\\\|~|!|>|\\\\.|\\\\-|\\\\+|\\\\-C|\\\\-b|\\\\-S|\\\\-u|\\\\-t|\\\\-p|\\\\-l|\\\\-d|\\\\-f|\\\\-g|\\\\-s|\\\\-z|\\\\-k|\\\\-e|\\\\-O|\\\\-T|\\\\-B|\\\\-M|\\\\-A|\\\\-X|\\\\-W|\\\\-c|\\\\-R|\\\\-o|\\\\-x|\\\\-w|\\\\-r|\\\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        regex: '(?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?\"',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"qstring\": [{\n        token: \"string\",\n        regex: \"(?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?'\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }],\n      \"block_comment\": [{\n        token: \"comment.doc\",\n        regex: \"^=cut\\\\b\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment.doc\"\n      }]\n    };\n  };\n\n  oop.inherits(PerlHighlightRules, TextHighlightRules);\n  exports.PerlHighlightRules = PerlHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/perl\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/perl_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var PerlHighlightRules = acequire(\"./perl_highlight_rules\").PerlHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PerlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode({\n      start: \"^=(begin|item)\\\\b\",\n      end: \"^=(cut)\\\\b\"\n    });\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = [{\n      start: \"=begin\",\n      end: \"=cut\",\n      lineStartOnly: true\n    }, {\n      start: \"=item\",\n      end: \"=cut\",\n      lineStartOnly: true\n    }];\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/perl\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}