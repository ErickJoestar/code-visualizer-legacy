{"version":3,"sources":["../node_modules/brace/mode/gherkin.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","stringEscape","GherkinHighlightRules","languages","name","labels","keywords","map","l","join","this","$rules","start","token","regex","next","defaultToken","normalizeRules","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","console","log","match","length","type","call","prototype"],"mappings":"6HAAAA,IAAIC,OAAO,mCAAoC,CAAC,UAAW,UAAW,SAAU,cAAe,kCAAkC,SAAUC,EAAUC,EAASC,GAC5J,IAAIC,EAAMH,EAAS,cACfI,EAAqBJ,EAAS,0BAA0BI,mBACxDC,EAAe,kFAEfC,EAAwB,WAC1B,IAAIC,EAAY,CAAC,CACfC,KAAM,KACNC,OAAQ,oDACRC,SAAU,4BAERD,EAASF,EAAUI,KAAI,SAAUC,GACnC,OAAOA,EAAEH,UACRI,KAAK,KACJH,EAAWH,EAAUI,KAAI,SAAUC,GACrC,OAAOA,EAAEF,YACRG,KAAK,KACRC,KAAKC,OAAS,CACZC,MAAO,CAAC,CACNC,MAAO,mBACPC,MAAO,2BACN,CACDD,MAAO,UACPC,MAAO,QACN,CACDD,MAAO,UACPC,MAAO,MAAQT,EAAS,SAAWC,EAAW,QAC7C,CACDO,MAAO,UACPC,MAAO,OACN,CACDD,MAAO,SAEPC,MAAO,OACPC,KAAM,aACL,CACDF,MAAO,SAEPC,MAAO,IACPC,KAAM,YACL,CACDF,MAAO,OACPC,MAAO,kBACPC,KAAM,CAAC,CACLF,MAAO,OACPC,MAAO,QACN,CACDD,MAAO,qBACPC,MAAO,WACN,CACDD,MAAO,QACPC,MAAO,GACPC,KAAM,WAEP,CACDF,MAAO,UACPC,MAAO,WACN,CACDD,MAAO,UACPC,MAAO,WACPC,KAAM,cACL,CACDF,MAAO,UACPC,MAAO,OACPC,KAAM,UAER,UAAa,CAAC,CACZF,MAAO,2BACPC,MAAOb,GACN,CACDY,MAAO,SAEPC,MAAO,OACPC,KAAM,SACL,CACDC,aAAc,WAEhB,SAAY,CAAC,CACXH,MAAO,2BACPC,MAAOb,GACN,CACDY,MAAO,SACPC,MAAO,QACPC,KAAM,YACL,CACDF,MAAO,SACPC,MAAO,MACPC,KAAM,SACL,CACDC,aAAc,WAEhB,aAAc,CAAC,CACbH,MAAO,UACPC,MAAO,IACPC,KAAM,SACL,CACDF,MAAO,UACPC,MAAO,MACN,CACDD,MAAO,SACPC,MAAO,OACN,CACDE,aAAc,YAGlBN,KAAKO,kBAGPlB,EAAImB,SAAShB,EAAuBF,GACpCH,EAAQK,sBAAwBA,KAElCR,IAAIC,OAAO,mBAAoB,CAAC,UAAW,UAAW,SAAU,cAAe,gBAAiB,qCAAqC,SAAUC,EAAUC,EAASC,GAChK,IAAIC,EAAMH,EAAS,cACfuB,EAAWvB,EAAS,UAAUwB,KAC9BlB,EAAwBN,EAAS,6BAA6BM,sBAE9DkB,EAAO,WACTV,KAAKW,eAAiBnB,EACtBQ,KAAKY,WAAaZ,KAAKa,mBAGzBxB,EAAImB,SAASE,EAAMD,GACnB,WACET,KAAKc,iBAAmB,IACxBd,KAAKe,IAAM,mBAEXf,KAAKgB,kBAAoB,SAAUC,EAAOC,EAAMC,GAC9C,IAAIC,EAASpB,KAAKqB,WAAWH,GAGzBI,EADgBtB,KAAKuB,eAAeC,cAAcN,EAAMD,GACjCK,OAO3B,OANAG,QAAQC,IAAIT,GAERC,EAAKS,MAAM,aACbP,GAAU,MAGRE,EAAOM,QAA4C,WAAlCN,EAAOA,EAAOM,OAAS,GAAGC,KACtCT,GAGI,SAATH,IACEC,EAAKS,MAAM,oDACbP,GAfS,KAgBAF,EAAKS,MAAM,gCACpBP,GAjBS,KAkBAF,EAAKS,MAAM,WACpBP,GAAU,OAIPA,KAERU,KAAKpB,EAAKqB,WACb5C,EAAQuB,KAAOA","file":"static/js/44.bb45c9bf.chunk.js","sourcesContent":["ace.define(\"ace/mode/gherkin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n  var GherkinHighlightRules = function GherkinHighlightRules() {\n    var languages = [{\n      name: \"en\",\n      labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n      keywords: \"Given|When|Then|And|But\"\n    }];\n    var labels = languages.map(function (l) {\n      return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function (l) {\n      return l.keywords;\n    }).join(\"|\");\n    this.$rules = {\n      start: [{\n        token: \"constant.numeric\",\n        regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n      }, {\n        token: \"keyword\",\n        regex: \"\\\\*\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: '\"',\n        next: \"qqstring\"\n      }, {\n        token: \"text\",\n        regex: \"^\\\\s*(?=@[\\\\w])\",\n        next: [{\n          token: \"text\",\n          regex: \"\\\\s+\"\n        }, {\n          token: \"variable.parameter\",\n          regex: \"@[\\\\w]+\"\n        }, {\n          token: \"empty\",\n          regex: \"\",\n          next: \"start\"\n        }]\n      }, {\n        token: \"comment\",\n        regex: \"<[^>]+>\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|(?=.)\",\n        next: \"table-item\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|$\",\n        next: \"start\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"table-item\": [{\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: /\\|/\n      }, {\n        token: \"string\",\n        regex: /\\\\./\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(GherkinHighlightRules, TextHighlightRules);\n  exports.GherkinHighlightRules = GherkinHighlightRules;\n});\nace.define(\"ace/mode/gherkin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/gherkin_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var GherkinHighlightRules = acequire(\"./gherkin_highlight_rules\").GherkinHighlightRules;\n\n  var Mode = function Mode() {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var space2 = \"  \";\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      console.log(state);\n\n      if (line.match(\"[ ]*\\\\|\")) {\n        indent += \"| \";\n      }\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n          indent += space2;\n        } else if (line.match(\"(Given|Then).+(:)$|Examples:\")) {\n          indent += space2;\n        } else if (line.match(\"\\\\*.+\")) {\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}