{"version":3,"sources":["../node_modules/brace/mode/pascal.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PascalHighlightRules","this","$rules","start","caseInsensitive","token","regex","push_","next","defaultToken","push","normalizeRules","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","end","$id"],"mappings":"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","file":"static/js/98.362d95e5.chunk.js","sourcesContent":["ace.define(\"ace/mode/pascal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PascalHighlightRules = function PascalHighlightRules() {\n    this.$rules = {\n      start: [{\n        caseInsensitive: true,\n        token: 'keyword.control.pascal',\n        regex: '\\\\b(?:(absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor))\\\\b'\n      }, {\n        caseInsensitive: true,\n        token: ['variable.pascal', \"text\", 'storage.type.prototype.pascal', 'entity.name.function.prototype.pascal'],\n        regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?(?=(?:\\\\(.*?\\\\))?;\\\\s*(?:attribute|forward|external))'\n      }, {\n        caseInsensitive: true,\n        token: ['variable.pascal', \"text\", 'storage.type.function.pascal', 'entity.name.function.pascal'],\n        regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?'\n      }, {\n        token: 'constant.numeric.pascal',\n        regex: '\\\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\\\.?[0-9]*)|(\\\\.[0-9]+))((e|E)(\\\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b'\n      }, {\n        token: 'punctuation.definition.comment.pascal',\n        regex: '--.*$',\n        push_: [{\n          token: 'comment.line.double-dash.pascal.one',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.double-dash.pascal.one'\n        }]\n      }, {\n        token: 'punctuation.definition.comment.pascal',\n        regex: '//.*$',\n        push_: [{\n          token: 'comment.line.double-slash.pascal.two',\n          regex: '$',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.line.double-slash.pascal.two'\n        }]\n      }, {\n        token: 'punctuation.definition.comment.pascal',\n        regex: '\\\\(\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.pascal',\n          regex: '\\\\*\\\\)',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.pascal.one'\n        }]\n      }, {\n        token: 'punctuation.definition.comment.pascal',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.definition.comment.pascal',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.pascal.two'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.pascal',\n        regex: '\"',\n        push: [{\n          token: 'constant.character.escape.pascal',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'punctuation.definition.string.end.pascal',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.double.pascal'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.pascal',\n        regex: '\\'',\n        push: [{\n          token: 'constant.character.escape.apostrophe.pascal',\n          regex: '\\'\\''\n        }, {\n          token: 'punctuation.definition.string.end.pascal',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.single.pascal'\n        }]\n      }, {\n        token: 'keyword.operator',\n        regex: '[+\\\\-;,/*%]|:=|='\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(PascalHighlightRules, TextHighlightRules);\n  exports.PascalHighlightRules = PascalHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/pascal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/pascal_highlight_rules\", \"ace/mode/folding/coffee\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var PascalHighlightRules = acequire(\"./pascal_highlight_rules\").PascalHighlightRules;\n  var FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = PascalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"--\", \"//\"];\n    this.blockComment = [{\n      start: \"(*\",\n      end: \"*)\"\n    }, {\n      start: \"{\",\n      end: \"}\"\n    }];\n    this.$id = \"ace/mode/pascal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}