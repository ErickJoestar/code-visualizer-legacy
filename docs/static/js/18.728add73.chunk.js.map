{"version":3,"sources":["../node_modules/brace/mode/cirru.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","CirruHighlightRules","this","$rules","start","token","regex","next","comment","string","escape","line","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","CoffeeFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"mappings":"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","file":"static/js/18.728add73.chunk.js","sourcesContent":["ace.define(\"ace/mode/cirru_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CirruHighlightRules = function CirruHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'comment.line.double-dash',\n        regex: /--/,\n        next: 'comment'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/\n      }, {\n        token: 'storage.modifier',\n        regex: /,/,\n        next: 'line'\n      }, {\n        token: 'support.function',\n        regex: /[^\\(\\)\"\\s]+/,\n        next: 'line'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }],\n      comment: [{\n        token: 'comment.line.double-dash',\n        regex: / +[^\\n]+/,\n        next: 'start'\n      }],\n      string: [{\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'line'\n      }, {\n        token: 'constant.character.escape',\n        regex: /\\\\/,\n        next: 'escape'\n      }, {\n        token: 'string.quoted.double',\n        regex: /[^\\\\\"]+/\n      }],\n      escape: [{\n        token: 'constant.character.escape',\n        regex: /./,\n        next: 'string'\n      }],\n      line: [{\n        token: 'constant.numeric',\n        regex: /[\\d\\.]+/\n      }, {\n        token: 'markup.raw',\n        regex: /^\\s*/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\$/,\n        next: 'start'\n      }, {\n        token: 'variable.parameter',\n        regex: /[^\\(\\)\"\\s]+/\n      }, {\n        token: 'storage.modifier',\n        regex: /\\(/,\n        next: 'start'\n      }, {\n        token: 'storage.modifier',\n        regex: /\\)/\n      }, {\n        token: 'markup.raw',\n        regex: /^ */,\n        next: 'start'\n      }, {\n        token: 'string.quoted.double',\n        regex: /\"/,\n        next: 'string'\n      }]\n    };\n  };\n\n  oop.inherits(CirruHighlightRules, TextHighlightRules);\n  exports.CirruHighlightRules = CirruHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/cirru\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/cirru_highlight_rules\", \"ace/mode/folding/coffee\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var CirruHighlightRules = acequire(\"./cirru_highlight_rules\").CirruHighlightRules;\n  var CoffeeFoldMode = acequire(\"./folding/coffee\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = CirruHighlightRules;\n    this.foldingRules = new CoffeeFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.$id = \"ace/mode/cirru\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}