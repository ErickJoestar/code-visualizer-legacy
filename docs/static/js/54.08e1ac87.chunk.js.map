{"version":3,"sources":["../node_modules/brace/mode/haskell_cabal.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","CabalHighlightRules","this","$rules","token","regex","inherits","BaseFoldMode","FoldMode","Range","isHeading","session","row","getTokens","type","lastIndexOf","getFoldWidget","foldStyle","test","getLine","maxRow","getLength","getFoldWidgetRange","startColumn","length","startRow","endRow","endColumn","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","file":"static/js/54.08e1ac87.chunk.js","sourcesContent":["ace.define(\"ace/mode/haskell_cabal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CabalHighlightRules = function CabalHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"^\\\\s*--.*$\"\n      }, {\n        token: [\"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"markup.heading\",\n        regex: /^(\\w.*)$/\n      }]\n    };\n  };\n\n  oop.inherits(CabalHighlightRules, TextHighlightRules);\n  exports.CabalHighlightRules = CabalHighlightRules;\n});\nace.define(\"ace/mode/folding/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n  var Range = acequire(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.isHeading = function (session, row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row == 0 || token && token.type.lastIndexOf(heading, 0) === 0;\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      if (this.isHeading(session, row)) {\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !/^\\s*$/.test(session.getLine(row))) {\n        var maxRow = session.getLength();\n\n        while (++row < maxRow) {\n          if (!/^\\s*$/.test(session.getLine(row))) {\n            break;\n          }\n        }\n\n        if (row == maxRow || this.isHeading(session, row)) {\n          return \"end\";\n        }\n      }\n\n      return \"\";\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      if (this.isHeading(session, row)) {\n        while (++row < maxRow) {\n          if (this.isHeading(session, row)) {\n            row--;\n            break;\n          }\n        }\n\n        endRow = row;\n\n        if (endRow > startRow) {\n          while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow))) {\n            endRow--;\n          }\n        }\n\n        if (endRow > startRow) {\n          var endColumn = session.getLine(endRow).length;\n          return new Range(startRow, startColumn, endRow, endColumn);\n        }\n      } else if (this.getFoldWidget(session, foldStyle, row) === \"end\") {\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n\n        while (--row >= 0) {\n          if (this.isHeading(session, row)) {\n            break;\n          }\n        }\n\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_cabal_highlight_rules\", \"ace/mode/folding/haskell_cabal\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var CabalHighlightRules = acequire(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\n  var FoldMode = acequire(\"./folding/haskell_cabal\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}