{"version":3,"sources":["../node_modules/brace/mode/tcl.js"],"names":["ace","define","acequire","exports","module","oop","Range","BaseFoldMode","FoldMode","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextHighlightRules","TclHighlightRules","$rules","token","regex","next","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","tokens","getTokenizer","getLineTokens","type","$id"],"mappings":"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","file":"static/js/136.17d2a34e.chunk.js","sourcesContent":["ace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/tcl_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var TclHighlightRules = function TclHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*\\\\\\\\$\",\n        next: \"commentfollow\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"support.function\",\n        regex: '[\\\\\\\\]$',\n        next: \"splitlineStart\"\n      }, {\n        token: \"text\",\n        regex: /\\\\(?:[\"{}\\[\\]$\\\\])/\n      }, {\n        token: \"text\",\n        // last value before command\n        regex: '^|[^{][;][^}]|[/\\r/]',\n        next: \"commandItem\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: '[ ]*[\"]',\n        next: \"qqstring\"\n      }, {\n        token: \"variable.instance\",\n        regex: \"[$]\",\n        next: \"variable\"\n      }, {\n        token: \"support.function\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n      }, {\n        token: \"identifier\",\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[{]\",\n        next: \"commandItem\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[(]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"commandItem\": [{\n        token: \"comment\",\n        regex: \"#.*\\\\\\\\$\",\n        next: \"commentfollow\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"variable.instance\",\n        regex: \"[$]\",\n        next: \"variable\"\n      }, {\n        token: \"support.function\",\n        regex: \"(?:[:][:])[a-zA-Z0-9_/]+(?:[:][:])\",\n        next: \"commandItem\"\n      }, {\n        token: \"support.function\",\n        regex: \"[a-zA-Z0-9_/]+(?:[:][:])\",\n        next: \"commandItem\"\n      }, {\n        token: \"support.function\",\n        regex: \"(?:[:][:])\",\n        next: \"commandItem\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"support.function\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n      }, {\n        token: \"keyword\",\n        regex: \"[a-zA-Z0-9_/]+\",\n        next: \"start\"\n      }],\n      \"commentfollow\": [{\n        token: \"comment\",\n        regex: \".*\\\\\\\\$\",\n        next: \"commentfollow\"\n      }, {\n        token: \"comment\",\n        regex: '.+',\n        next: \"start\"\n      }],\n      \"splitlineStart\": [{\n        token: \"text\",\n        regex: \"^.\",\n        next: \"start\"\n      }],\n      \"variable\": [{\n        token: \"variable.instance\",\n        // variable tcl\n        regex: \"[a-zA-Z_\\\\d]+(?:[(][a-zA-Z_\\\\d]+[)])?\",\n        next: \"start\"\n      }, {\n        token: \"variable.instance\",\n        // variable tcl with braces\n        regex: \"{?[a-zA-Z_\\\\d]+}?\",\n        next: \"start\"\n      }],\n      \"qqstring\": [{\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '(?:[^\\\\\\\\]|\\\\\\\\.)*?[\"]',\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n  };\n\n  oop.inherits(TclHighlightRules, TextHighlightRules);\n  exports.TclHighlightRules = TclHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function MatchingBraceOutdent() {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/tcl\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/folding/cstyle\", \"ace/mode/tcl_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n  var TclHighlightRules = acequire(\"./tcl_highlight_rules\").TclHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = acequire(\"../range\").Range;\n\n  var Mode = function Mode() {\n    this.HighlightRules = TclHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/tcl\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}