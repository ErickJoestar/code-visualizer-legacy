{"version":3,"sources":["../node_modules/brace/mode/batchfile.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","BatchFileHighlightRules","this","$rules","start","token","regex","caseInsensitive","include","push","next","defaultToken","variable","normalizeRules","metaData","name","scopeName","fileTypes","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","file":"static/js/15.23a3faba.chunk.js","sourcesContent":["ace.define(\"ace/mode/batchfile_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var BatchFileHighlightRules = function BatchFileHighlightRules() {\n    this.$rules = {\n      start: [{\n        token: 'keyword.command.dosbatch',\n        regex: '\\\\b(?:append|assoc|at|attrib|break|cacls|cd|chcp|chdir|chkdsk|chkntfs|cls|cmd|color|comp|compact|convert|copy|date|del|dir|diskcomp|diskcopy|doskey|echo|endlocal|erase|fc|find|findstr|format|ftype|graftabl|help|keyb|label|md|mkdir|mode|more|move|path|pause|popd|print|prompt|pushd|rd|recover|ren|rename|replace|restore|rmdir|set|setlocal|shift|sort|start|subst|time|title|tree|type|ver|verify|vol|xcopy)\\\\b',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.control.statement.dosbatch',\n        regex: '\\\\b(?:goto|call|exit)\\\\b',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.control.conditional.if.dosbatch',\n        regex: '\\\\bif\\\\s+not\\\\s+(?:exist|defined|errorlevel|cmdextversion)\\\\b',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.control.conditional.dosbatch',\n        regex: '\\\\b(?:if|else)\\\\b',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.control.repeat.dosbatch',\n        regex: '\\\\bfor\\\\b',\n        caseInsensitive: true\n      }, {\n        token: 'keyword.operator.dosbatch',\n        regex: '\\\\b(?:EQU|NEQ|LSS|LEQ|GTR|GEQ)\\\\b'\n      }, {\n        token: ['doc.comment', 'comment'],\n        regex: '(?:^|\\\\b)(rem)($|\\\\s.*$)',\n        caseInsensitive: true\n      }, {\n        token: 'comment.line.colons.dosbatch',\n        regex: '::.*$'\n      }, {\n        include: 'variable'\n      }, {\n        token: 'punctuation.definition.string.begin.shell',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.shell',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: 'variable'\n        }, {\n          defaultToken: 'string.quoted.double.dosbatch'\n        }]\n      }, {\n        token: 'keyword.operator.pipe.dosbatch',\n        regex: '[|]'\n      }, {\n        token: 'keyword.operator.redirect.shell',\n        regex: '&>|\\\\d*>&\\\\d*|\\\\d*(?:>>|>|<)|\\\\d*<&|\\\\d*<>'\n      }],\n      variable: [{\n        token: 'constant.numeric',\n        regex: '%%\\\\w+|%[*\\\\d]|%\\\\w+%'\n      }, {\n        token: 'constant.numeric',\n        regex: '%~\\\\d+'\n      }, {\n        token: ['markup.list', 'constant.other', 'markup.list'],\n        regex: '(%)(\\\\w+)(%?)'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  BatchFileHighlightRules.metaData = {\n    name: 'Batch File',\n    scopeName: 'source.dosbatch',\n    fileTypes: ['bat']\n  };\n  oop.inherits(BatchFileHighlightRules, TextHighlightRules);\n  exports.BatchFileHighlightRules = BatchFileHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../../lib/oop\");\n  var Range = acequire(\"../../range\").Range;\n  var BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/batchfile\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/batchfile_highlight_rules\", \"ace/mode/folding/cstyle\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var BatchFileHighlightRules = acequire(\"./batchfile_highlight_rules\").BatchFileHighlightRules;\n  var FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function Mode() {\n    this.HighlightRules = BatchFileHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"::\";\n    this.blockComment = \"\";\n    this.$id = \"ace/mode/batchfile\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});"],"sourceRoot":""}